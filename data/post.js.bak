postData = [{
    "content": "\u003cp\u003e这是MongoDB系列的最后一篇，我很讨厌最后这个词，好像说出来也意味着要失去些什么，事实上我的确要失去一些东西，以后我很可能不会去翻看这些内容，为此我很讨厌这一点\u003c/p\u003e\n\n\u003ch4\u003e创建Maven项目\u003c/h4\u003e\n\n\u003cp\u003e\u003c!--more--\u003epom.xml中添加spring-mongo的依赖包\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;dependency\u0026gt;\n        \u0026lt;groupId\u0026gt;org.mongodb\u0026lt;/groupId\u0026gt;\n        \u0026lt;artifactId\u0026gt;mongo-java-driver\u0026lt;/artifactId\u0026gt;\n        \u0026lt;version\u0026gt;2.10.1\u0026lt;/version\u0026gt;\n        \u0026lt;type\u0026gt;jar\u0026lt;/type\u0026gt;\n        \u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt;\n    \u0026lt;/dependency\u0026gt;\n    \u0026lt;dependency\u0026gt;\n        \u0026lt;groupId\u0026gt;org.springframework.data\u0026lt;/groupId\u0026gt;\n        \u0026lt;artifactId\u0026gt;spring-data-mongodb\u0026lt;/artifactId\u0026gt;\n        \u0026lt;version\u0026gt;1.2.1.RELEASE\u0026lt;/version\u0026gt;\n        \u0026lt;type\u0026gt;jar\u0026lt;/type\u0026gt;\n        \u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt;\n    \u0026lt;/dependency\u0026gt;\n    \u0026lt;dependency\u0026gt;\n        \u0026lt;groupId\u0026gt;org.springframework.data\u0026lt;/groupId\u0026gt;\n        \u0026lt;artifactId\u0026gt;spring-data-mongodb-cross-store\u0026lt;/artifactId\u0026gt;\n        \u0026lt;version\u0026gt;1.2.1.RELEASE\u0026lt;/version\u0026gt;\n        \u0026lt;type\u0026gt;jar\u0026lt;/type\u0026gt;\n        \u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt;\n    \u0026lt;/dependency\u0026gt;\n    \u0026lt;dependency\u0026gt;\n        \u0026lt;groupId\u0026gt;org.springframework.data\u0026lt;/groupId\u0026gt;\n        \u0026lt;artifactId\u0026gt;spring-data-mongodb-log4j\u0026lt;/artifactId\u0026gt;\n        \u0026lt;version\u0026gt;1.2.1.RELEASE\u0026lt;/version\u0026gt;\n        \u0026lt;type\u0026gt;jar\u0026lt;/type\u0026gt;\n        \u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt;\n    \u0026lt;/dependency\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e代码太多了，就不全部贴出来了\u003c/p\u003e\n\n\u003ch4\u003espring-mongo配置\u003c/h4\u003e\n\n\u003cp\u003e添加spring-mongo.xml配置文件\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u0026gt;\n\u0026lt;beans xmlns\u003d\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi\u003d\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context\u003d\"http://www.springframework.org/schema/context\"\n    xmlns:mongo\u003d\"http://www.springframework.org/schema/data/mongo\"\n    xsi:schemaLocation\u003d\"\n    http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\n    http://www.springframework.org/schema/data/mongo       \n    http://www.springframework.org/schema/data/mongo/spring-mongo-1.2.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-3.2.xsd\"\u0026gt;\n\n    \u0026lt;context:component-scan base-package\u003d\"cn.upblog.als\" /\u0026gt;\n\n    \u0026lt;mongo:mongo host\u003d\"127.0.0.1\" port\u003d\"27017\" /\u0026gt;\n    \u0026lt;mongo:db-factory dbname\u003d\"test\" mongo-ref\u003d\"mongo\" /\u0026gt;\n\n    \u0026lt;bean id\u003d\"mongoTemplate\" class\u003d\"org.springframework.data.mongodb.core.MongoTemplate\"\u0026gt;\n        \u0026lt;constructor-arg name\u003d\"mongoDbFactory\" ref\u003d\"mongoDbFactory\" /\u0026gt;\n    \u0026lt;/bean\u0026gt;\n\n    \u0026lt;mongo:mapping-converter base-package\u003d\"cn.upblog.als.bean\" /\u0026gt;\n    \u0026lt;mongo:repositories base-package\u003d\"cn.upblog.als.dao.impl\" /\u0026gt;\n\n\u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e实体类User\u003c/h4\u003e\n\n\u003cp\u003e这个实体就是对应MongoDB的Bson对象，当然这一切都已经由框架帮我们完成了\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003epackage cn.upblog.als.bean;\n\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\n@Document(collection \u003d \"user\")\npublic class User {\n\n    @Id\n    private String id;\n    private String username;\n    private String password;\n    private String email;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id \u003d id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username \u003d username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password \u003d password;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email \u003d email;\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e}\u003c/p\u003e\n\n\u003ch4\u003e编写接口UserDao\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003epackage cn.upblog.als.dao;\n\nimport java.util.List;\n\nimport cn.upblog.als.bean.User;\n\npublic interface UserDao {\n\n    List\u0026lt;User\u0026gt; findList();\n    void insert(User user);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e包名一定要和配置里面扫描的一样，不多说了\u003c/p\u003e\n\n\u003ch4\u003e接口实现类UserDaoImpl\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003epackage cn.upblog.als.dao.impl;\n\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.stereotype.Repository;\n\nimport cn.upblog.als.bean.User;\nimport cn.upblog.als.dao.UserDao;\n\n@Repository\npublic class UserDaoImpl implements UserDao{\n\n    public static final Logger logger \u003d LoggerFactory.getLogger(UserDaoImpl.class); \n\n    @Autowired\n    private MongoTemplate mongoTemplate;\n\n    public List\u0026lt;User\u0026gt; findList() {\n        return mongoTemplate.findAll(User.class);\n    }\n\n    public void insert(User user) {\n\n        mongoTemplate.insert(user);\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这东西也没什么好说的，直接拿MongoTemplate用就可以了，主要是spring太强大了\u003c/p\u003e\n\n\u003ch4\u003e编写测试类TestMongo\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003epackage cn.upblog.test;\n\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport cn.upblog.als.bean.User;\nimport cn.upblog.als.dao.UserDao;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations \u003d { \"classpath:spring-config.xml\" })\npublic class TestMongo {\n\n    @Autowired\n    UserDao userDao;\n\n    @Test\n    public void insert(){\n        User user \u003d new User();\n        user.setId(\"1\");\n        user.setUsername(\"alsguo\");\n        user.setEmail(\"alsguo@gmail.com\");\n        user.setPassword(\"asdfasdf\");\n        userDao.insert(user );\n    }\n\n    @Test\n    public void find(){\n        List\u0026lt;User\u0026gt; list \u003d userDao.findList();\n\n        System.out.println(\"---查询user---\");\n        for (User user : list) {\n            System.out.println(\"id : \" + user.getId() + \"  name : \" + user.getUsername()\n                    + \" email : \" + user.getEmail());\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e运行insert方法后来执行下find方法\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e---查询user---\nid : 574d0bb5c00eabcccb0d3e0e  name : alsguo email : alsguo@gmail.com\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e用mongo命令行来查看一下数据\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.user.find()\n{ \"_id\" : ObjectId(\"574d0bb5c00eabcccb0d3e0e\"), \"_class\" : \"cn.upblog.als.bean.User\", \"username\" : \"alsguo\", \"password\" : \"asdfasdf\", \"email\" : \"alsguo@gmail.com\" }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e就这样吧，最烦贴代码了，我去吃口翔冷静下了\u003c/p\u003e\n",
    "title": "Spring MongoDB整合",
    "post_tag": "MongoDB",
    "post_date": "2016-06-08 02:00:00"
}, {
    "content": "\u003cp\u003e最近在读王小波的《黄金时代》中《三十而立》一篇中说到\"人之不肖如仓鼠矣\"，这句话大意是这样的，李斯在担任小吏时，看到仓库中的老鼠吃了睡，睡饱吃，养的体积庞大，活的安逸无比，又看到厕所中的老鼠食污秽之物，还经常遇到人来赶打，一时间感慨万千，叹道人TM不也是这样啊\u003cbr /\u003e\n扯远了，看本章内容吧\u003cbr /\u003e\n新建maven项目\u003cbr /\u003e\n在pom中添加\u003cstrong\u003eMongoDB JDBC\u003c/strong\u003e驱动\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;org.mongodb\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;mongo-java-driver\u0026lt;/artifactId\u0026gt;\n    \u0026lt;version\u0026gt;3.2.2\u0026lt;/version\u0026gt;\n\u0026lt;/dependency\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003c!--more--\u003e完了建个测试类TestMdbJDBC.java\u003c/p\u003e\n\n\u003ch4\u003e连接数据库\u003c/h4\u003e\n\n\u003cp\u003e如果数据库不存在，mongo会自动创建\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003epackage com.test.mongodb;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.mongodb.MongoClient;\nimport com.mongodb.client.MongoDatabase;\n\npublic class TestMdbJDBC {\n    MongoClient mongoClient;\n    MongoDatabase mongoDatabase;\n\n    @Before\n    public void conn() {\n        mongoClient \u003d new MongoClient(\"localhost\", 27017);\n        mongoDatabase \u003d mongoClient.getDatabase(\"test\");\n        System.out.println(\"连接test成功\");\n    }\n\n    @Test\n    public void find() {\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e查询文档\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003e@Test\npublic void find() {\n\n    MongoCollection\u0026lt;Document\u0026gt; mongoCollection \u003d mongoDatabase\n            .getCollection(\"person\");\n    System.out.println(\"遍历person\");\n    /*\n     * 游标遍历\n     */\n    FindIterable\u0026lt;Document\u0026gt; findIterable \u003d mongoCollection.find();\n    MongoCursor\u0026lt;Document\u0026gt; mongoCursor \u003d findIterable.iterator();\n    while (mongoCursor.hasNext()) {\n        System.out.println(mongoCursor.next());\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e执行该方法打印\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e连接test数据库成功\n查询person\nDocument{{_id\u003d574668602290de517635ee76, name\u003djack, age\u003d22.0}}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e插入文档或集合\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003e@Test\npublic void insert() {\n    MongoCollection\u0026lt;Document\u0026gt; mongoCollection \u003d mongoDatabase\n            .getCollection(\"person\");\n\n    Document document1 \u003d new Document(\"name\", \"hia\")\n            .append(\"age\", 30);\n    Document document2 \u003d new Document(\"name\", \"ahc\")\n    .append(\"age\", 28);\n\n    List\u0026lt;Document\u0026gt; documents \u003d new ArrayList\u0026lt;Document\u0026gt;();\n    documents.add(document1);\n    documents.add(document2);\n\n    mongoCollection.insertMany(documents);\n    System.out.println(\"插入文档集合成功\");\n\n    find();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这里是插入集合，单个集合就是\u003cstrong\u003einsertOne\u003c/strong\u003e，这个\u003cstrong\u003eDocument\u003c/strong\u003e是key-value，所在的包是org.bson.Document\u003cbr /\u003e\n执行该测试方法\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e连接test数据库成功\n插入文档集合成功\n遍历person\nDocument{{_id\u003d574668602290de517635ee76, name\u003djack, age\u003d22.0}}\nDocument{{_id\u003d5746ab050bfb0a0314c01bf2, name\u003dhia, age\u003d30}}\nDocument{{_id\u003d5746ab050bfb0a0314c01bf3, name\u003dahc, age\u003d28}}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e更新文档\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003e@Test\npublic void update(){\n    MongoCollection\u0026lt;Document\u0026gt; mongoCollection \u003d mongoDatabase\n            .getCollection(\"person\");\n    mongoCollection.updateMany(Filters.gt(\"age\", 25), new Document(\"$set\",new Document(\"age\",32)));\n    System.out.println(\"更新文档 —— age大于25的age设置为32\");\n\n    find();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e如果只更新第一个可以用\u003cstrong\u003eupdateOne\u003c/strong\u003e，参数就不猜解释了\u003cbr /\u003e\n执行更新测试方法\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e连接test数据库成功\n更新文档 —— age大于25的age设置为32\n遍历person\nDocument{{_id\u003d574668602290de517635ee76, name\u003djack, age\u003d22.0}}\nDocument{{_id\u003d5746ab050bfb0a0314c01bf2, name\u003dhia, age\u003d32}}\nDocument{{_id\u003d5746ab050bfb0a0314c01bf3, name\u003dahc, age\u003d32}}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e删除文档\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003e@Test\npublic void delete(){\n    MongoCollection\u0026lt;Document\u0026gt; mongoCollection \u003d mongoDatabase\n            .getCollection(\"person\");\n    mongoCollection.deleteMany(Filters.eq(\"age\", 32));\n    System.out.println(\"删除文档 —— age为32的\");\n\n    find();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e同样删除一个使用\u003cstrong\u003edeleteOne\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e连接test数据库成功\n执行删除测试方法  \n删除文档 —— age为32的\n遍历person\nDocument{{_id\u003d574668602290de517635ee76, name\u003djack, age\u003d22.0}}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e删除所有\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003e@Test\npublic void deleteAll(){\n    MongoCollection\u0026lt;Document\u0026gt; mongoCollection \u003d mongoDatabase\n            .getCollection(\"person\");\n    mongoCollection.deleteMany(new Document());\n    System.out.println(\"删除所有文档\");\n\n    find();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e其实就是给一个空的\u003cstrong\u003eDocument\u003c/strong\u003e就可以了和\u003cstrong\u003eremove({})\u003c/strong\u003e一个道理\u003c/p\u003e\n\n\u003ch2\u003e总结\u003c/h2\u003e\n\n\u003cp\u003e从上面几个方法可以看到操作mongo的几个步骤\u003c/p\u003e\n\n\u003ch4\u003e1.连接mongodb，选择数据库\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003eMongoClient mongoClient \u003d new MongoClient(serverAddress, port);\nMongoDatabase mongoDatabase \u003d mongoClient.getDatabase(dbName);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e如果创建集合可以用\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003emongoDatabase.createCollection(documentName);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e2.选择文档\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003eMongoCollection\u0026lt;Document\u0026gt; collection \u003d mongoDatabase.getCollection(documentName);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e3.增删改查\u003c/h4\u003e\n\n\u003cp\u003e全部都是\u003cstrong\u003eMongoCollection\u003c/strong\u003e里面的方法，具体用Alt + / 自己看吧\u003c/p\u003e\n\n\u003ch4\u003e4.关闭mongodb连接\u003c/h4\u003e\n\n\u003cp\u003e关不关都可以\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003emongoClient.close();\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ejava操作mongodb是不是灰常简单，啧啧~\u003c/p\u003e\n",
    "title": "JAVA JDBC操作MongoDB",
    "post_tag": "MongoDB",
    "post_date": "2016-06-06 08:13:10"
}, {
    "content": "\u003cp\u003e这一章是关于MongoDB服务器操作，用户管理，数据备份，状态监控等，或者使用管理工具告别命令行\u003cbr /\u003e\n从\u003cstrong\u003eMongoDB\u003c/strong\u003e启动开始\u003c/p\u003e\n\n\u003ch4\u003e安装MongoDB服务\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\HONEY_GUO\u0026gt;E:\nE:\\\u0026gt;cd mongodb/bin\nE:\\mongodb\\bin\u0026gt;mongod --dbpath\u003dE:/mongodb/data --logpath\u003dE:/mongodb/log/mongodb.log --port\u003d27021 --install\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e此时在我的电脑-\u003e系统-\u003e服务里已经有一个MongoDB的服务了，可以设置为开机启动\u003cbr /\u003e\n或者使用命令\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\HONEY_GUO\u0026gt;net start MongoDB\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003c!--more--\u003e 在mongodb/bin目录下有很多的exe程序，如mongo、mongod、mongos等等，具体怎么用，可以定位到bin目录下，想看谁加上--help就可以了\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\HONEY_GUO\u0026gt;E:\\mongodb\\bin mongo --help\nC:\\Users\\HONEY_GUO\u0026gt;E:\\mongodb\\bin mongod --help\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e用户\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eMongoDB\u003c/strong\u003e用户操作要在admin数据库下，懂\u003cstrong\u003eMySQL\u003c/strong\u003e的应该很好理解\u003cbr /\u003e\n如何添加、更新、删除用户、和设置用户权限呢\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eE:\\mongodb\\bin\u0026gt;mongo\nMongoDB shell version: 3.0.6\nconnecting to: test\n\u0026gt; use admin\nswitched to db admin\n\u0026gt;\n\u0026gt; db.createUser(\n... {\n...    user:\"hia\",\n...    pwd:\"123456\",\n...    roles: [ { role: \"__system\",db: \"admin\"}]\n...  }\n... )\nSuccessfully added user: {\n        \"user\" : \"hia\",\n        \"roles\" : [\n                {\n                        \"role\" : \"__system\",\n                        \"db\" : \"admin\"\n                }\n        ]\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e创建超级用户hia\u003cbr /\u003e\n查看用户db.getUsers()\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.getUsers()\n[\n        {\n                \"_id\" : \"admin.hia\",\n                \"user\" : \"hia\",\n                \"db\" : \"admin\",\n                \"roles\" : [\n                        {\n                                \"role\" : \"__system\",\n                                \"db\" : \"admin\"\n                        }\n                ]\n        }\n]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e使用该用户登录\u003cstrong\u003eMongoDB\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eE:\\mongodb\\bin\u0026gt;mongo 127.0.0.1:27017/admin -u hia -p\nMongoDB shell version: 3.0.6\nEnter password:\nconnecting to: 127.0.0.1:27017/admin\n\u0026gt; use test\nswitched to db test\n\u0026gt; db.person.find()\n\u0026gt; db.person.insert({\"name\":\"jack\",\"age\":22})\nWriteResult({ \"nInserted\" : 1 })\n\u0026gt; db.person.find()\n{ \"_id\" : ObjectId(\"574668602290de517635ee76\"), \"name\" : \"jack\", \"age\" : 22 }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e因为创建用户hia时就已经授权为超级用户了，对应权限就是roles的值，如果是只读权限role:read，如果是读写就是role:readWrite\u003cbr /\u003e\n更新和删除就不演示了\u003c/p\u003e\n\n\u003ch4\u003e数据备份和恢复\u003c/h4\u003e\n\n\u003cp\u003e数据备份和恢复的重要性不言而喻，使用的不好会给服务器造成很大的压力\u003cbr /\u003e\n最简单直接copy，需要关闭服务器\u003cbr /\u003e\n你也可以配置主从复制，前面讲过\u003cbr /\u003e\n然后就是使用\u003cstrong\u003emongodump\u003c/strong\u003e和\u003cstrong\u003emongorestore\u003c/strong\u003e\n先在mongodb目录创建backup文件夹来存放数据库\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\Administrator\u0026gt;E:\nE:\\\u0026gt;cd mongodb/bin\nE:\\mongodb\\bin\u0026gt;mongodump -d test -o E:\\mongodb\\backup\n2016-05-26T14:09:24.829+0800    writing test.system.indexes to E:\\mongodb\\backup\\test\\system.indexes.bson\n2016-05-26T14:09:24.836+0800    writing test.person to E:\\mongodb\\backup\\test\\person.bson\n2016-05-26T14:09:24.841+0800    writing test.person metadata to E:\\mongodb\\backup\\test\\person.metadata.json\n2016-05-26T14:09:24.844+0800    done dumping test.person (1 document)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e导出成功，文件夹目录也有文件了\u003cbr /\u003e\n再来恢复\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eE:\\mongodb\\bin\u0026gt;mongorestore -d test --drop E:\\mongodb\\backup\\test\n2016-05-26T14:12:09.505+0800    building a list of collections to restore from E:\\mongodb\\backup\\test dir\n2016-05-26T14:12:09.518+0800    reading metadata file from E:\\mongodb\\backup\\test\\person.metadata.json\n2016-05-26T14:12:09.520+0800    restoring test.person from file E:\\mongodb\\backup\\test\\person.bson\n2016-05-26T14:12:09.526+0800    restoring indexes for collection test.person from metadata\n2016-05-26T14:12:09.530+0800    finished restoring test.person (1 document)\n2016-05-26T14:12:09.531+0800    done\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003edrop就是删除原来原有的，关于\u003cstrong\u003emongodump\u003c/strong\u003e和\u003cstrong\u003emongorestore\u003c/strong\u003e如何使用可以--help查看\u003cbr /\u003e\n全程是不需要关闭服务器的，不说三遍了\u003c/p\u003e\n\n\u003ch4\u003e监控\u003c/h4\u003e\n\n\u003cp\u003e使用\u003cstrong\u003edb.serverStatus()\u003c/strong\u003e这个函数可以获取到MongoDB的服务器统计信息\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\Administrator\u0026gt;E:\nE:\\\u0026gt;cd mongodb/bin\nE:\\mongodb\\bin\u0026gt;mongo\nMongoDB shell version: 3.0.6\nconnecting to: test\n\u0026gt; db.serverStatus()\n{\n        \"host\" : \"AFODY-605251927\",\n        \"version\" : \"3.0.6\",\n        \"process\" : \"mongod\",\n        \"pid\" : NumberLong(11432),\n        \"uptime\" : 39,\n        \"uptimeMillis\" : NumberLong(39473),\n        \"uptimeEstimate\" : 35,\n......\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e内容挺多的，后面不贴了，自己试试就可以看到了\u003c/p\u003e\n\n\u003ch4\u003emongostat\u003c/h4\u003e\n\n\u003cp\u003e它是bin目录下面的可执行程序，这玩意是动态的，变态到每秒都会刷新，上面那个是静态的\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\Administrator\u0026gt;E:\nE:\\\u0026gt;cd mongodb/bin\nE:\\mongodb\\bin\u0026gt;mongostat\ninsert query update delete getmore command flushes mapped  vsize   res faults qr|qw ar|aw netIn netOut conn     time\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      0   0|0   0|0   79b    10k    2 13:57:46\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      0   0|0   0|0   79b    10k    2 13:57:47\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      1   0|0   0|0   79b    10k    2 13:57:48\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M     18   0|0   0|0   79b    10k    2 13:57:49\n    *0    *0     *0     *0       0     2|0       0 240.0M 638.0M 88.0M      2   0|0   0|0  133b    10k    2 13:57:50\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      2   0|0   0|0   79b    10k    2 13:57:52\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      2   0|0   0|0   79b    10k    2 13:57:53\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      2   0|0   0|0   79b    10k    2 13:57:54\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      2   0|0   0|0   79b    10k    2 13:57:55\n    *0    *0     *0     *0       0     2|0       0 240.0M 638.0M 88.0M      2   0|0   0|0  133b    10k    2 13:57:56\ninsert query update delete getmore command flushes mapped  vsize   res faults qr|qw ar|aw netIn netOut conn     time\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      0   0|0   0|0   79b    10k    2 13:57:57\n    *0    *0     *0     *0       0     1|0       0 240.0M 638.0M 88.0M      0   0|0   0|0   79b    10k    2 13:57:58\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e后面的时间可以看出来，每秒都刷新，变态到不要不要的\u003c/p\u003e\n\n\u003ch4\u003e管理工具\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eRockmongo\u003c/strong\u003e是一个类似于\u003cstrong\u003ephpMyAdmin\u003c/strong\u003e的管理工具，通过他可以管理\u003cstrong\u003eMongoDB\u003c/strong\u003e服务、数据库、集合、文档、索引等，百度吧\u003cbr /\u003e\n到此，关于\u003cstrong\u003eMongoDB\u003c/strong\u003e就说这么多了，后面说说\u003cstrong\u003eJAVA\u003c/strong\u003e操作\u003cstrong\u003eMongodB\u003c/strong\u003e\u003c/p\u003e\n",
    "title": "MongoDB用户、数据备份、状态监控、管理工具",
    "post_tag": "MongoDB",
    "post_date": "2016-06-03 09:02:35"
}, {
    "content": "\u003cp\u003e\u003cstrong\u003eMongoDB\u003c/strong\u003e复制就是主从复制，将数据同步在多个服务器上，复制可以保障数据的完整，数据的读写分离，备份和集群部署等等\u003c/p\u003e\n\n\u003ch2\u003e主从复制\u003c/h2\u003e\n\n\u003cp\u003e\u003c!--more--\u003e复制有哪些好处，读写分离，数据备份和恢复等等\u003cbr /\u003e\n如何实现\u003cbr /\u003e\n1.复制mongodb文件夹到F盘用来模拟不同服务器\u003cbr /\u003e\n2.启动D盘mongodb指定为主库，然后启动F盘mongodb作为从库\u003cbr /\u003e\n按步骤来，首先是主库\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\HONEY_GUO\u0026gt;E:\nE:\\\u0026gt;cd mongodb/bin\nE:\\mongodb\\bin\u0026gt;mongod -dbpath\u003dE:/mongodb/data --master\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e启动命令后面多加了参数--\u003cstrong\u003emaster\u003c/strong\u003e，此时是默认端口也就是\u003cstrong\u003e27017\u003c/strong\u003e，其次是从库\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\HONEY_GUO\u0026gt;F:\nF:\\\u0026gt;cd mongodb/bin\nF:\\mongodb\\bin\u0026gt;mongod -dbpath\u003dF:/mongodb/data --port\u003d9908 --slave --source\u003d127.0.0.1:27017\n2016-05-24T15:34:39.343+0800 I CONTROL  [initandlisten] options: { net: { port: 9908 }, slave: true, source: \"127.0.0.1:27017\", storage: { dbPath: \"F:/mongodb/data\" } }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e启动成功，复制了一行日志信息\u003cbr /\u003e\n这时端口是9908，--slave就是从库，--source表示主库的地址要加端口\u003c/p\u003e\n\n\u003ch4\u003e测试主从复制\u003c/h4\u003e\n\n\u003cp\u003e我们操作主库，看从库是否同步\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eE:\\mongodb\\bin\u0026gt;mongo 127.0.0.1:27017\nMongoDB shell version: 3.0.6\nconnecting to: 127.0.0.1:27017/test\n\u0026gt; db.person.remove({})\nWriteResult({ \"nRemoved\" : 3 })\n\u0026gt; db.person.find()\n\u0026gt; db.person.insert({\"name\":\"jack\",\"age\":20,\"address\":\"ShangHai\"})\nWriteResult({ \"nInserted\" : 1 })\n\u0026gt; db.person.find()\n{ \"_id\" : ObjectId(\"57440571ec8d17bc16ca8982\"), \"name\" : \"jack\", \"age\" : 20, \"address\" : \"ShangHai\" }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e此时从库\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eF:\\mongodb\\bin\u0026gt;mongo\nMongoDB shell version: 3.0.6\nconnecting to: test\n\u0026gt; db.person.find()\n{ \"_id\" : ObjectId(\"57440571ec8d17bc16ca8982\"), \"name\" : \"jack\", \"age\" : 20, \"address\" : \"ShangHai\" }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e吃精，呜呜呜~\n如果两台不够在加就行了，不演示了，太麻烦\u003c/p\u003e\n\n\u003ch4\u003e读写分离\u003c/h4\u003e\n\n\u003cp\u003e这玩意和驱动有关，意思就是如果你使用\u003cstrong\u003eJAVA\u003c/strong\u003e语言去操作\u003cstrong\u003eMongoDB\u003c/strong\u003e的话驱动中提供读写分离的写法，后面在详细说\u003c/p\u003e\n\n\u003ch4\u003e副本集\u003c/h4\u003e\n\n\u003cp\u003e一种巨牛X的主从复制，但是和上面的集群有所不同\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eN个节点（DB）的集群\u003cbr /\u003e\n  任何节点（DB）都可作为主库，也就是说没有特定的主库\u003cbr /\u003e\n  所有的操作都在主节点上\u003cbr /\u003e\n  自动的故障转移和恢复，如果当前的主库宕机了，就会推选一个从库作为主库，牛X点\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e副本集名称使用--replSet指定，这里取名为tsets\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eE:\\mongodb\\bin\u0026gt;mongod --dbpath E:/mongodb/data --port 9901 --replSet tsets/127.0.0.1:9902\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这里tsets后面的127.0.0.1:9902是指集群的另一个服务器，用于当第一个服务发生故障是后面一个自动顶上\u003cbr /\u003e\n同样命令启动第二个\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eF:\\mongodb\\bin\u0026gt;mongod --dbpath F:/mongodb/bin --port 9902 --replSet tsets/127.0.0.1:9903\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个时候要初始化副本集，连接哪个服务器都可以，不过一定要进入\u003cstrong\u003eadmin\u003c/strong\u003e的集合\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eE:\\mongodb\\bin\u0026gt;mongo 127.0.0.1:9901/admin\nMongoDB shell version: 3.0.6\nconnecting to: 127.0.0.1:9901/admin\n\u0026gt; db.runCommand({\"replSetInitiate\":{\n... \"_id\":\"tsets\",\n... \"members\":[{\"_id\":1,\"host\":\"127.0.0.1:9901\"},{\"_id\":2,\"host\":\"127.0.0.1:9902\"}]\n... }})\n{ \"ok\" : 1 }\ntsets:OTHER\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e此时可以用rs.status()查看集群的服务器状态\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003etsets:OTHER\u0026gt; rs.status()\n{\n        \"set\" : \"tsets\",\n        \"date\" : ISODate(\"2016-05-24T09:33:05.016Z\"),\n        \"myState\" : 1,\n        \"members\" : [\n                {\n                        \"_id\" : 1,\n                        \"name\" : \"127.0.0.1:9901\",\n                        \"health\" : 1,\n                        \"state\" : 1,\n                        \"stateStr\" : \"PRIMARY\",\n                        \"uptime\" : 934,\n                        \"optime\" : Timestamp(1464082115, 1),\n                        \"optimeDate\" : ISODate(\"2016-05-24T09:28:35Z\"),\n                        \"electionTime\" : Timestamp(1464082118, 1),\n                        \"electionDate\" : ISODate(\"2016-05-24T09:28:38Z\"),\n                        \"configVersion\" : 1,\n                        \"self\" : true\n                },\n                {\n                        \"_id\" : 2,\n                        \"name\" : \"127.0.0.1:9902\",\n                        \"health\" : 1,\n                        \"state\" : 2,\n                        \"stateStr\" : \"SECONDARY\",\n                        \"uptime\" : 270,\n                        \"optime\" : Timestamp(1464082115, 1),\n                        \"optimeDate\" : ISODate(\"2016-05-24T09:28:35Z\"),\n                        \"lastHeartbeat\" : ISODate(\"2016-05-24T09:29:32.656Z\"),\n                        \"lastHeartbeatRecv\" : ISODate(\"2016-05-24T09:29:32.681Z\"),\n                        \"pingMs\" : 0,\n                        \"configVersion\" : 1\n                }\n        ],\n        \"ok\" : 1\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从信息中可以清楚的看到端口为9901的是主库\u003cstrong\u003ePRIMARY\u003c/strong\u003e，而9902是\u003cstrong\u003eSECONDARY\u003c/strong\u003e，另外也可以从服务器运行的日志可以看到此时的主库，这里不贴代码了\u003cbr /\u003e\n运行中的服务器集群可以使用rs.addArb()去追加新的服务器\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eE:\\mongodb\\bin\u0026gt;mongo 127.0.0.1:9901/admin\nMongoDB shell version: 3.0.6\nconnecting to: 127.0.0.1:9901/admin\ntsets:PRIMARY\u0026gt; rs.addArb(\"127.0.0.1:9903\")\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这时打印服务器的状态会出现一个\u003cstrong\u003eARBITER\u003c/strong\u003e的标记为仲裁服务器，自己电脑不演示了\u003cbr /\u003e\n最后用\u003cstrong\u003ectrl+c\u003c/strong\u003e关闭\u003cstrong\u003e9901\u003c/strong\u003e服务器，可以看到\u003cstrong\u003e9902\u003c/strong\u003e变成了主库\u003cstrong\u003ePRIMARY\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e分片\u003c/h2\u003e\n\n\u003cp\u003e在\u003cstrong\u003eMongoDB\u003c/strong\u003e中的存在另一种集群，就是分片技术，类似于\u003cstrong\u003eMySql\u003c/strong\u003e的表分区\u003cbr /\u003e\n 当\u003cstrong\u003eMongoDB\u003c/strong\u003e存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据\u003cbr /\u003e\n还是来张图说明下\u003cbr /\u003e\n\u003cimg src\u003d\"http://7rf322.com1.z0.glb.clouddn.com/image/mongodb_fpdes.png\" alt\u003d\"image\" /\u003e\n分片的原理是由路由服务器\u003cstrong\u003emongos\u003c/strong\u003e根据\u003cstrong\u003econfig\u003c/strong\u003e的数据和片的配置关系，将数据分摊到\u003cstrong\u003emongod\u003c/strong\u003e的集群\u003c/p\u003e\n\n\u003ch4\u003e分片实例\u003c/h4\u003e\n\n\u003cp\u003e唉，在D盘复制两份mongodb文件夹起名为mongodb1,mongodb2，此时已经有四个MongoDB服务器了，分别是D盘两个，E、F盘个一个\u003cbr /\u003e\n首先开启\u003cstrong\u003econfig服务器\u003c/strong\u003e，指定端口27020\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eF:\\mongodb\\bin\u0026gt;mongod --dbpath\u003dF:/mongodb/data --port\u003d27020\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e其次是\u003cstrong\u003emongos服务器\u003c/strong\u003e，这里使用的是\u003cstrong\u003emongos\u003c/strong\u003e命令，端口27021同时指定\u003cstrong\u003econfig\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eE:\\mongodb\\bin\u0026gt;mongos --port\u003d27021 --configdb\u003d127.0.0.1:27020\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e然后就是mongod服务器，作为分片中的片，启动D盘下的两个mongod服务器，端口27022,27023\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eD:\\mongodb1\\bin\u0026gt;mongod --dbpath\u003dD:/mongodb1/data --port\u003d27022\nD:\\mongodb2\\bin\u0026gt;mongod --dbpath\u003dD:/mongodb2/data --port\u003d27023\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e全部启动成功，截个图看一下\n\u003cimg src\u003d\"http://7rf322.com1.z0.glb.clouddn.com/image/mongodb_qp.png\" alt\u003d\"image\" /\u003e\n最后服务配置\u003cbr /\u003e\n将mongod服务器添加到mongos服务器中\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\HONEY_GUO\u0026gt;E:/mongodb/bin/mongo 127.0.0.1:27021/admin\nMongoDB shell version: 3.0.6\nconnecting to: 127.0.0.1:27021/admin\nmongos\u0026gt; db.runCommand({\"addshard\":\"127.0.0.1:27022\",allowLocal:true})\n{ \"shardAdded\" : \"shard0000\", \"ok\" : 1 }\nmongos\u0026gt; db.runCommand({\"addshard\":\"127.0.0.1:27023\",allowLocal:true})\n{ \"shardAdded\" : \"shard0001\", \"ok\" : 1 }\nmongos\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e添加分片就是\u003cstrong\u003eaddshard\u003c/strong\u003e，\u003cstrong\u003eaddshard\u003c/strong\u003e中也可以是副本集\n分片已经集群，接下来就是设置切分数据\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e1.开启数据库分片\u003cbr /\u003e\n  2.指定片键\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e已test数据库为例\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003emongos\u0026gt; db.runCommand({\"enablesharding\":\"test\"})\n{ \"ok\" : 1 }\nmongos\u0026gt; db.runCommand({\"shardcollection\":\"test.person\",\"key\":{\"name\":1}})\n{ \"collectionsharded\" : \"test.person\", \"ok\" : 1 }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e注意\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e在第二步之前需要指定片键为索引，否则会提示please create an index that starts with the shard key before sharding\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003e测试分片\u003c/h4\u003e\n\n\u003cp\u003e插入10W行记录，用db.printShardingStatus()命令查看分片情况\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003emongos\u0026gt; use test\nswitched to db test\nmongos\u0026gt; db.person.find()\nmongos\u0026gt; for(var i \u003d 0;i \u0026lt; 100000; i++){ db.person.insert({\"name\":\"ahc\"+i,\"age\":i}) }\nWriteResult({ \"nInserted\" : 1 })\nmongos\u0026gt; db.printShardingStatus()\n--- Sharding Status ---\n  sharding version: {\n        \"_id\" : 1,\n        \"minCompatibleVersion\" : 5,\n        \"currentVersion\" : 6,\n        \"clusterId\" : ObjectId(\"57453ee7e5c18dc262bb785c\")\n}\n  shards:\n        {  \"_id\" : \"shard0000\",  \"host\" : \"127.0.0.1:27022\" }\n        {  \"_id\" : \"shard0001\",  \"host\" : \"127.0.0.1:27023\" }\n  balancer:\n        Currently enabled:  yes\n        Currently running:  no\n        Failed balancer rounds in last 5 attempts:  0\n        Migration Results for the last 24 hours:\n                1 : Success\n  databases:\n        {  \"_id\" : \"admin\",  \"partitioned\" : false,  \"primary\" : \"config\" }\n        {  \"_id\" : \"test\",  \"partitioned\" : true,  \"primary\" : \"shard0000\" }\n                test.person\n                        shard key: { \"name\" : 1 }\n                        chunks:\n                                shard0000       2\n                                shard0001       1\n                        { \"name\" : { \"$minKey\" : 1 } } --\u0026gt;\u0026gt; { \"name\" : \"ahc1\" } on : shard0001 Timestamp(2, 0)\n                        { \"name\" : \"ahc1\" } --\u0026gt;\u0026gt; { \"name\" : \"ahc6\" } on : shard0000 Timestamp(2, 1)\n                        { \"name\" : \"ahc6\" } --\u0026gt;\u0026gt; { \"name\" : { \"$maxKey\" : 1 } } on : shard0000 Timestamp(1, 3)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e打印的分片状态\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003eshards\u003c/strong\u003e 可以清楚的看到分为了两个片，分别是shard0000和shard0001以及对应的服务器地址端口等信息\u003cbr /\u003e\n  \u003cstrong\u003edatabases\u003c/strong\u003e partitioned关键字表示是否已分区，test数据库为true，表示已分区\u003cbr /\u003e\n  \u003cstrong\u003etest.person\u003c/strong\u003e 分区的状态信息，片键为{\"name\",1}，\u003cstrong\u003echunks\u003c/strong\u003e很有意思，这里可以看到分为3段，shard0000上2段，shard0001上1段，具体是怎样分的呢\u003cbr /\u003e\n  无穷小($minKey)——ahc1——ahc6——无穷大($maxKay)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e因吹斯汀\u003c/p\u003e\n",
    "title": "MongoDB复制、分片技术",
    "post_tag": "MongoDB",
    "post_date": "2016-05-29 14:00:22"
}, {
    "content": "\u003cp\u003e关系型数据库中索引通常能够提高查询的效率，\u003cstrong\u003eMongoDB\u003c/strong\u003e也是这样的，如果没有索引，\u003cstrong\u003eMongoDB\u003c/strong\u003e在查询数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。提到索引就不得不说数据量，数据少你好意思用索引\u003c/p\u003e\n\n\u003ch4\u003e数据\u003c/h4\u003e\n\n\u003cp\u003e\u003c!--more--\u003e插入\u003cstrong\u003e10W\u003c/strong\u003e数据\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; for(var i \u003d 0; i \u0026lt; 100000 ;i++){\n... var age \u003d parseInt(100*Math.random());\n... db.person.insert({\"name\":\"ahc\"+i,\"age\":age})\n... }\nWriteResult({ \"nInserted\" : 1 })\n\u0026gt; db.person.find({\"name\":\"ahc\"+99999})\n{ \"_id\" : ObjectId(\"5742a45123c1858fdd096b09\"), \"name\" : \"ahc99999\", \"age\" : 76 }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e等待的过程是漫长的\u003c/p\u003e\n\n\u003ch4\u003e查询性能分析\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eMySql\u003c/strong\u003e中查询性能分析在查询前面加\u003cstrong\u003eEXPLAIN\u003c/strong\u003e，\u003cstrong\u003eMongoDB\u003c/strong\u003e中在最后加\u003cstrong\u003eexplain()\u003c/strong\u003e方法\u003cbr /\u003e\n先来分析查询姓名为ahx1000\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find({\"name\":\"ahc\"+10000}).explain()\n{\n        \"queryPlanner\" : {\n                \"plannerVersion\" : 1,\n                \"namespace\" : \"test.person\",\n                \"indexFilterSet\" : false,\n                \"parsedQuery\" : {\n                        \"name\" : {\n                                \"$eq\" : \"ahc10000\"\n                        }\n                },\n                \"winningPlan\" : {\n                        \"stage\" : \"COLLSCAN\",\n                        \"filter\" : {\n                                \"name\" : {\n                                        \"$eq\" : \"ahc10000\"\n                                }\n                        },\n                        \"direction\" : \"forward\"\n                },\n                \"rejectedPlans\" : [ ]\n        },\n        \"serverInfo\" : {\n                \"host\" : \"AFODY-605201654\",\n                \"port\" : 27017,\n                \"version\" : \"3.0.6\",\n                \"gitVersion\" : \"1ef45a23a4c5e3480ac919b28afcba3c615488f2\"\n        },\n        \"ok\" : 1\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这是\u003cstrong\u003eexplain\u003c/strong\u003e的\u003cstrong\u003equeryPlanner\u003c/strong\u003e模式分析，也是默认模式，其他两种分别是\u003cstrong\u003eexecutionStats\u003c/strong\u003e、\u003cstrong\u003eallPlansExecution\u003c/strong\u003e，这不是重点\u003cbr /\u003e\n我们重要的参数分析\u003cbr /\u003e\n* \u003cstrong\u003enamespace\u003c/strong\u003e 顾名思义，就是所执行查询的表\n* \u003cstrong\u003eindexFilterSet\u003c/strong\u003e\n* \u003cstrong\u003ewinningPlan\u003c/strong\u003e 查询优化器针对该query所返回的最优执行计划的详细内容\n* \u003cstrong\u003estage\u003c/strong\u003e 这里是\u003cstrong\u003eCOLLSCAN\u003c/strong\u003e，也就是全表扫描，stage的类型很多不一一介绍\n* \u003cstrong\u003edirection\u003c/strong\u003e 查询顺序，如果用了\u003cstrong\u003esort({w:-1})\u003c/strong\u003e将显示\u003cstrong\u003ebackward\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch4\u003e创建索引\u003c/h4\u003e\n\n\u003cp\u003e在name创建索引后在来看查询分析\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.ensureIndex({\"name\":1})\n{\n        \"createdCollectionAutomatically\" : false,\n        \"numIndexesBefore\" : 1,\n        \"numIndexesAfter\" : 2,\n        \"ok\" : 1\n}\n\u0026gt;\n\u0026gt; db.person.find({\"name\":\"ahc\"+10000}).explain()\n{\n        \"queryPlanner\" : {\n                \"plannerVersion\" : 1,\n                \"namespace\" : \"test.person\",\n                \"indexFilterSet\" : false,\n                \"parsedQuery\" : {\n                        \"name\" : {\n                                \"$eq\" : \"ahc10000\"\n                        }\n                },\n                \"winningPlan\" : {\n                        \"stage\" : \"FETCH\",\n                        \"inputStage\" : {\n                                \"stage\" : \"IXSCAN\",\n                                \"keyPattern\" : {\n                                        \"name\" : 1\n                                },\n                                \"indexName\" : \"name_1\",\n                                \"isMultiKey\" : false,\n                                \"direction\" : \"forward\",\n                                \"indexBounds\" : {\n                                        \"name\" : [\n                                                \"[\\\"ahc10000\\\", \\\"ahc10000\\\"]\"\n                                        ]\n                                }\n                        }\n                },\n                \"rejectedPlans\" : [ ]\n        },\n        \"serverInfo\" : {\n                \"host\" : \"AFODY-605201654\",\n                \"port\" : 27017,\n                \"version\" : \"3.0.6\",\n                \"gitVersion\" : \"1ef45a23a4c5e3480ac919b28afcba3c615488f2\"\n        },\n        \"ok\" : 1\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e此时\u003cstrong\u003ewinningPlan\u003c/strong\u003e信息与之前没有创建索引时有所不同\u003cbr /\u003e\n* \u003cstrong\u003estage\u003c/strong\u003e 此时是\u003cstrong\u003eFETCH\u003c/strong\u003e，根据索引去检索指定的文档\n* \u003cstrong\u003einputStage\u003c/strong\u003e 是stage的子stage，\u003cstrong\u003eIXSCAN\u003c/strong\u003e指索引扫描，第一次是没有的\n* \u003cstrong\u003eindexName\u003c/strong\u003e 索引名称\n* \u003cstrong\u003eisMultiKey\u003c/strong\u003e 是否是Multikey，此处返回是false，如果索引建立在array上，将是true\n* \u003cstrong\u003eindexBounds\u003c/strong\u003e 所扫描的索引范围，这里是直接定位到name是ahc10000的person\u003c/p\u003e\n\n\u003cp\u003e因为没有查询时间的输出，索引的产生的效果不是很直观的看出来，但是直接定位到\u003cstrong\u003e{\"name\":\"ahc10000\"}\u003c/strong\u003e是很可怕的，简直不敢相信如此快\u003c/p\u003e\n\n\u003ch4\u003e唯一索引\u003c/h4\u003e\n\n\u003cp\u003e创建唯一索引后，重复的键值自然就不能插入，和关系型数据库是类似的\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.ensureIndex({\"name\":1},{\"unique\":true})\n{\n        \"createdCollectionAutomatically\" : false,\n        \"numIndexesBefore\" : 1,\n        \"numIndexesAfter\" : 2,\n        \"ok\" : 1\n}\n\u0026gt; db.person.insert({\"name\":\"abc\",\"age\":23})\nWriteResult({ \"nInserted\" : 1 })\n\u0026gt; db.person.insert({\"name\":\"abc\",\"age\":30})\nWriteResult({\n        \"nInserted\" : 0,\n        \"writeError\" : {\n                \"code\" : 11000,\n                \"errmsg\" : \"E11000 duplicate key error index: test.person.$name_1 dup key: { : \\\"abc\\\" }\"\n        }\n})\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eerrmsg\u003c/strong\u003e提示真是棒棒哒\u003c/p\u003e\n\n\u003ch4\u003e组合索引\u003c/h4\u003e\n\n\u003cp\u003e组合索引在关系型数据库中则称复合索引，即可以使用多个字段创建索引\u003cbr /\u003e\n增加一个生日字段，创建姓名和生日的组合索引\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find()\n{ \"_id\" : ObjectId(\"5742c0c8d92d1c4cfd34bc17\"), \"name\" : \"jack\", \"age\" : 25, \"birtday\" : \"1993-02-02\" }\n{ \"_id\" : ObjectId(\"5742c0d8d92d1c4cfd34bc18\"), \"name\" : \"joe\", \"age\" : 22, \"birtday\" : \"1990-12-02\" }\n{ \"_id\" : ObjectId(\"5742c110d92d1c4cfd34bc19\"), \"name\" : \"ahc\", \"age\" : 28, \"birtday\" : \"1990-09-09\" }\n\u0026gt;\n\u0026gt; db.person.ensureIndex({\"name\":1,\"birtday\":1})\n{\n        \"createdCollectionAutomatically\" : false,\n        \"numIndexesBefore\" : 2,\n        \"numIndexesAfter\" : 3,\n        \"ok\" : 1\n}\n\u0026gt; db.person.ensureIndex({\"birtday\":1,\"name\":1})\n{\n        \"createdCollectionAutomatically\" : false,\n        \"numIndexesBefore\" : 3,\n        \"numIndexesAfter\" : 4,\n        \"ok\" : 1\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003egetIndexes\u003c/strong\u003e\u003cbr /\u003e\n先看一下组合索引到底创建了那些索引\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.getIndexes()\n[\n        {\n                \"v\" : 1,\n                \"key\" : {\n                        \"_id\" : 1\n                },\n                \"name\" : \"_id_\",\n                \"ns\" : \"test.person\"\n        },\n        {\n                \"v\" : 1,\n                \"unique\" : true,\n                \"key\" : {\n                        \"name\" : 1\n                },\n                \"name\" : \"name_1\",\n                \"ns\" : \"test.person\"\n        },\n        {\n                \"v\" : 1,\n                \"key\" : {\n                        \"name\" : 1,\n                        \"birtday\" : 1\n                },\n                \"name\" : \"name_1_birtday_1\",\n                \"ns\" : \"test.person\"\n        },\n        {\n                \"v\" : 1,\n                \"key\" : {\n                        \"birtday\" : 1,\n                        \"name\" : 1\n                },\n                \"name\" : \"birtday_1_name_1\",\n                \"ns\" : \"test.person\"\n        }\n]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e执行一条查询语句，来看组合索引的查询效果\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find({\"name\":\"joe\",\"birtday\":\"1990-12-02\"}).explain()\n{\n        \"queryPlanner\" : {\n                \"plannerVersion\" : 1,\n                \"namespace\" : \"test.person\",\n                \"indexFilterSet\" : false,\n                \"parsedQuery\" : {\n                        \"$and\" : [\n                                {\n                                        \"birtday\" : {\n                                                \"$eq\" : \"1990-12-02\"\n                                        }\n                                },\n                                {\n                                        \"name\" : {\n                                                \"$eq\" : \"joe\"\n                                        }\n                                }\n                        ]\n                },\n                \"winningPlan\" : {\n                        \"stage\" : \"KEEP_MUTATIONS\",\n                        \"inputStage\" : {\n                                \"stage\" : \"FETCH\",\n                                \"filter\" : {\n                                        \"birtday\" : {\n                                                \"$eq\" : \"1990-12-02\"\n                                        }\n                                },\n                                \"inputStage\" : {\n                                        \"stage\" : \"IXSCAN\",\n                                        \"keyPattern\" : {\n                                                \"name\" : 1\n                                        },\n                                        \"indexName\" : \"name_1\",\n                                        \"isMultiKey\" : false,\n                                        \"direction\" : \"forward\",\n                                        \"indexBounds\" : {\n                                                \"name\" : [\n                                                        \"[\\\"joe\\\", \\\"joe\\\"]\"\n                                                ]\n                                        }\n                                }\n                        }\n                },\n                \"rejectedPlans\" : [ ]\n        },\n        \"serverInfo\" : {\n                \"host\" : \"AFODY-605201654\",\n                \"port\" : 27017,\n                \"version\" : \"3.0.6\",\n                \"gitVersion\" : \"1ef45a23a4c5e3480ac919b28afcba3c615488f2\"\n        },\n        \"ok\" : 1\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e纳尼，\u003cstrong\u003eindexName\u003c/strong\u003e居然是\u003cstrong\u003ename_1\u003c/strong\u003e组合索引并没有用到，但是我们可以看出这是查询优化器给出的最优方案，这可是最优哦\u003cbr /\u003e\n\u003cstrong\u003ehint\u003c/strong\u003e\u003cbr /\u003e\n手动来指定索引来执行查询\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find({\"name\":\"joe\",\"birtday\":\"1990-12-02\"}).hint({\"name\":1,\"birtday\":1}).explain()\n{\n        \"queryPlanner\" : {\n                \"plannerVersion\" : 1,\n                \"namespace\" : \"test.person\",\n                \"indexFilterSet\" : false,\n                \"parsedQuery\" : {\n                        \"$and\" : [\n                                {\n                                        \"birtday\" : {\n                                                \"$eq\" : \"1990-12-02\"\n                                        }\n                                },\n                                {\n                                        \"name\" : {\n                                                \"$eq\" : \"joe\"\n                                        }\n                                }\n                        ]\n                },\n                \"winningPlan\" : {\n                        \"stage\" : \"FETCH\",\n                        \"inputStage\" : {\n                                \"stage\" : \"IXSCAN\",\n                                \"keyPattern\" : {\n                                        \"name\" : 1,\n                                        \"birtday\" : 1\n                                },\n                                \"indexName\" : \"name_1_birtday_1\",\n                                \"isMultiKey\" : false,\n                                \"direction\" : \"forward\",\n                                \"indexBounds\" : {\n                                        \"name\" : [\n                                                \"[\\\"joe\\\", \\\"joe\\\"]\"\n                                        ],\n                                        \"birtday\" : [\n                                                \"[\\\"1990-12-02\\\", \\\"1990-12-02\\\"]\"\n                                        ]\n                                }\n                        }\n                },\n                \"rejectedPlans\" : [ ]\n        },\n        \"serverInfo\" : {\n                \"host\" : \"AFODY-605201654\",\n                \"port\" : 27017,\n                \"version\" : \"3.0.6\",\n                \"gitVersion\" : \"1ef45a23a4c5e3480ac919b28afcba3c615488f2\"\n        },\n        \"ok\" : 1\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e此时执行查询使用到的索引是\u003cstrong\u003ename_1_birtday_1\u003c/strong\u003e也就是组合索引咯\u003c/p\u003e\n\n\u003ch4\u003e删除索引\u003c/h4\u003e\n\n\u003cp\u003e如果文档的结构有所变化导致索引没有存在的必要，这时就要把索引删除掉，不删的话索引会降低增删改的性能\u003cbr /\u003e\n删除索引用\u003cstrong\u003edropIndex(indexName)\u003c/strong\u003e、\u003cstrong\u003edropIndexes\u003c/strong\u003e，后者是清空索引\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.dropIndex(\"name_1_birtday_1\")\n{ \"nIndexesWas\" : 4, \"ok\" : 1 }\n\u0026gt; db.person.getIndexes()\n[\n        {\n                \"v\" : 1,\n                \"key\" : {\n                        \"_id\" : 1\n                },\n                \"name\" : \"_id_\",\n                \"ns\" : \"test.person\"\n        },\n        {\n                \"v\" : 1,\n                \"unique\" : true,\n                \"key\" : {\n                        \"name\" : 1\n                },\n                \"name\" : \"name_1\",\n                \"ns\" : \"test.person\"\n        },\n        {\n                \"v\" : 1,\n                \"key\" : {\n                        \"birtday\" : 1,\n                        \"name\" : 1\n                },\n                \"name\" : \"birtday_1_name_1\",\n                \"ns\" : \"test.person\"\n        }\n]\n\u0026gt; db.person.dropIndex(\"name_1\")\n{ \"nIndexesWas\" : 3, \"ok\" : 1 }\n\u0026gt; db.person.dropIndexes()\n{\n        \"nIndexesWas\" : 2,\n        \"msg\" : \"non-_id indexes dropped for collection\",\n        \"ok\" : 1\n}\n\u0026gt; db.person.getIndexes()\n[\n        {\n                \"v\" : 1,\n                \"key\" : {\n                        \"_id\" : 1\n                },\n                \"name\" : \"_id_\",\n                \"ns\" : \"test.person\"\n        }\n]\n\u003c/code\u003e\u003c/pre\u003e\n",
    "title": "MongoDB高级操作之索引",
    "post_tag": "MongoDB",
    "post_date": "2016-05-26 06:48:25"
}, {
    "content": "\u003cp\u003e这章的内容有点多，会使用到\u003cstrong\u003eMongoDB\u003c/strong\u003e的各种方法，还是做好笔记，来次go~\u003c/p\u003e\n\n\u003ch2\u003e聚合\u003c/h2\u003e\n\n\u003cp\u003e常见的聚合操作和关系型数据库一样，有：\u003cstrong\u003ecount\u003c/strong\u003e、\u003cstrong\u003edistinct\u003c/strong\u003e、\u003cstrong\u003egroup\u003c/strong\u003e、\u003cstrong\u003emapReduce\u003c/strong\u003e，\u003cstrong\u003eMongoDB\u003c/strong\u003e中还有\u003cstrong\u003eaggregate\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch4\u003ecount\u003c/h4\u003e\n\n\u003cp\u003e\u003c!--more--\u003e上车吧，不解释了\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find()\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154a\"), \"name\" : \"jack\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"573d5e850509f6bcd87168e7\"), \"name\" : \"jackson\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9a\"), \"name\" : \"mark\", \"age\" : 32 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9b\"), \"name\" : \"gavin\", \"age\" : 23 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9c\"), \"name\" : \"ask\", \"age\" : 26 }\n\u0026gt; db.person.count()\n6\n\u0026gt; db.person.count({\"age\":28})\n2\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003edistinct\u003c/h4\u003e\n\n\u003cp\u003e指定谁，谁就不重复\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find()\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154a\"), \"name\" : \"jack\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"573d5e850509f6bcd87168e7\"), \"name\" : \"jackson\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9a\"), \"name\" : \"mark\", \"age\" : 32 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9b\"), \"name\" : \"gavin\", \"age\" : 23 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9c\"), \"name\" : \"ask\", \"age\" : 26 }\n\u0026gt; db.person.distinct(\"age\")\n[ 28, 25, 32, 23, 26 ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这结果我也是日了狗\u003c/p\u003e\n\n\u003ch4\u003egroup\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003egroup\u003c/strong\u003e这玩意有点小复杂，当然Sql里面的group也不是很简单\u003cbr /\u003e\n根据例子说吧\u003cbr /\u003e\n根据age分组，显示对应的name\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.group({\n... \"key\":{\"age\":true},\n... \"initial\":{\"person\":[]},\n... \"$reduce\":function(cur,prev){\n...    prev.person.push(cur.name);\n... }\n... })\n[\n        {\n                \"age\" : 28,\n                \"person\" : [\n                        \"jack\",\n                        \"jackson\"\n                ]\n        },\n        {\n                \"age\" : 25,\n                \"person\" : [\n                        \"joe\"\n                ]\n        },\n        {\n                \"age\" : 32,\n                \"person\" : [\n                        \"mark\"\n                ]\n        },\n        {\n                \"age\" : 23,\n                \"person\" : [\n                        \"gavin\"\n                ]\n        },\n        {\n                \"age\" : 26,\n                \"person\" : [\n                        \"ask\"\n                ]\n        }\n]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e震精了，有木有，完整的命令是这样的，不想自己动手的拿去直接执行吧\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.group({ \"key\":{\"age\":true}, \"initial\":{\"person\":[]}, \"$reduce\":function(cur,prev){    prev.person.push(cur.name); } })\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e来说说里面的参数\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003ekey\u003c/strong\u003e 分组key，这里是对年龄分组\u003cbr /\u003e\n  \u003cstrong\u003einitial\u003c/strong\u003e  英文就是初始化的意思，其实就是对每一个产生的key的结果集共同分享一个初始化函数，晕了吗，晕了就对了\u003cbr /\u003e\n  \u003cstrong\u003e$reduce\u003c/strong\u003e  两个参数都是缩写，有经验的程序员看一眼就明了，cur当前的文档对象，prev存放累积的文档对象，其实是一个不包含当前文档对象的集合，initial中的{\"person\":[]}有多少个文档，$reduce就会调用多少次\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e想在加一个人数，没问题\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.group({\n... \"key\":{\"age\":true},\n... \"initial\":{\"person\":[]},\n... \"$reduce\":function(cur,prev){\n...    prev.person.push(cur.name);\n... },\n... \"finalize\":function(out){ \n...    out.count\u003dout.person.length\n... }\n... })\n[\n        {\n                \"age\" : 28,\n                \"person\" : [\n                        \"jack\",\n                        \"jackson\"\n                ],\n                \"count\" : 2\n        },\n        {\n                \"age\" : 25,\n                \"person\" : [\n                        \"joe\"\n                ],\n                \"count\" : 1\n        },\n        {\n                \"age\" : 32,\n                \"person\" : [\n                        \"mark\"\n                ],\n                \"count\" : 1\n        },\n        {\n                \"age\" : 23,\n                \"person\" : [\n                        \"gavin\"\n                ],\n                \"count\" : 1\n        },\n        {\n                \"age\" : 26,\n                \"person\" : [\n                        \"ask\"\n                ],\n                \"count\" : 1\n        }\n]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e想在加一个条件，过滤掉age大于25的人，\u003cstrong\u003ecome on 北鼻\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.group({\n... \"key\":{\"age\":true},\n... \"initial\":{\"person\":[]},\n... \"$reduce\":function(cur,prev){\n...    prev.person.push(cur.name);\n... },\n... \"finalize\":function(out){ \n...    out.count\u003dout.person.length\n... },\n... \"condition:{\"age\":{$lt:25}}\n... })\n[ { \"age\" : 23, \"person\" : [ \"gavin\" ], \"count\" : 1 } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e就剩一条数据了，我TM好忧伤\u003cbr /\u003e\n不明觉厉\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003efinalize\u003c/strong\u003e 每组文档执行完成后执行这个函数\u003cbr /\u003e\n  \u003cstrong\u003econdition\u003c/strong\u003e 过滤条件\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003emapReduce\u003c/h4\u003e\n\n\u003cp\u003e这东西就是神器，当然这玩意也是最复杂的\u003cbr /\u003e\n先参考一下官方文档\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.collection.mapReduce(\n   function() {emit(key,value);},  //map 函数\n   function(key,values) {return reduceFunction},   //reduce 函数\n   {\n      out: collection,\n      query: document,\n      sort: document,\n      limit: number\n   }\n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e先看例子，这玩意光解释也不明白\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find()\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154a\"), \"name\" : \"jack\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"573d5e850509f6bcd87168e7\"), \"name\" : \"jackson\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9a\"), \"name\" : \"mark\", \"age\" : 32 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9b\"), \"name\" : \"gavin\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9c\"), \"name\" : \"ask\", \"age\" : 26 }\n\u0026gt; map \u003d function(){\n... emit(this.age,{count:1});\n... }\nfunction (){\nemit(this.age,{count:1});\n}\n\u0026gt; reduce \u003d function (key,values){\n... var result \u003d {count:0};\n... for( var i \u003d 0; i \u0026lt; values.length; i++){\n...     result.count +\u003d values[i].count;\n... }\n... return result;\n... }\nfunction (key,values){\nvar result \u003d {count:0};\nfor( var i \u003d 0; i \u0026lt; values.length; i++){\n    result.count +\u003d values[i].count;\n}\nreturn result;\n}\n\u0026gt; db.person.mapReduce(map,reduce,{\"out\":\"collection\"})\n{\n        \"result\" : \"collection\",\n        \"timeMillis\" : 189,\n        \"counts\" : {\n                \"input\" : 6,\n                \"emit\" : 6,\n                \"reduce\" : 2,\n                \"output\" : 4\n        },\n        \"ok\" : 1\n}\n\u0026gt; db.person.mapReduce(map,reduce,{\"out\":\"collection\"}).find()\n{ \"_id\" : 25, \"value\" : { \"count\" : 2 } }\n{ \"_id\" : 26, \"value\" : { \"count\" : 1 } }\n{ \"_id\" : 28, \"value\" : { \"count\" : 2 } }\n{ \"_id\" : 32, \"value\" : { \"count\" : 1 } }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e懵逼了吧，饶了一大圈就是按age分组，统计一下人数，咳咳咳~\u003cbr /\u003e\n先解释官方使用文档的参数，技术博客这点少不了\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003emap\u003c/strong\u003e 映射函数，生成键值对作为reduce函数的参数，调用方式必须emit(key, value)，会按照你指定的key进行映射分组\u003cbr /\u003e\n  \u003cstrong\u003ereduce\u003c/strong\u003e 统计函数 第一个参数就是map映射函数中的key不多说，第二个是map函数中value的数组，里面存放了很多个{\"count\":1}\u003cbr /\u003e\n  \u003cstrong\u003eout\u003c/strong\u003e 统计结果存放的集合\u003cbr /\u003e\n  \u003cstrong\u003equery\u003c/strong\u003e 筛选条件，满足条件才调用map映射函数\u003cbr /\u003e\n  \u003cstrong\u003esort\u003c/strong\u003e 执行map函数之前给文档排序\u003cbr /\u003e\n  \u003cstrong\u003elimit\u003c/strong\u003e 取文档的数量，也是执行map函数之前调用\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003emap和reduce是预先定义的函数，当然这是\u003cstrong\u003eJavaScript\u003c/strong\u003e语法了，不说了\u003cbr /\u003e\n第一次调用mapReduce之后输出了一些内容\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.mapReduce(map,reduce,{\"out\":\"collection\"})\n{\n        \"result\" : \"collection\",\n        \"timeMillis\" : 189,\n        \"counts\" : {\n                \"input\" : 6,\n                \"emit\" : 6,\n                \"reduce\" : 2,\n                \"output\" : 4\n        },\n        \"ok\" : 1\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e其实就是对mapReduce执行的分析说明，唉，还是看参数说明吧\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003eresult\u003c/strong\u003e 存放的结果的集合名字，这是个临时集合，mapReduce的连接关闭后自动就删除了\u003cbr /\u003e\n  \u003cstrong\u003etimeMillis\u003c/strong\u003e 执行所花费的时间，单位毫秒\u003cbr /\u003e\n  \u003cstrong\u003einput\u003c/strong\u003e 满足条件传入map函数的文档个数\u003cbr /\u003e\n  \u003cstrong\u003eemit\u003c/strong\u003e map函数中emit被调用的次数，可以说是满足条件的文档个数\u003cbr /\u003e\n  \u003cstrong\u003ereduce\u003c/strong\u003e reduce函数被调用的次数\u003cbr /\u003e\n  \u003cstrong\u003eoutput\u003c/strong\u003e 最后返回的文档个数\u003cbr /\u003e\n  \u003cstrong\u003eok\u003c/strong\u003e 成功，返回1\u003cbr /\u003e\n  \u003cstrong\u003eerr\u003c/strong\u003e 错误时提示\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e使用mapReduce后面加find查看结果\u003c/p\u003e\n\n\u003ch4\u003eaggregate\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eaggregate\u003c/strong\u003e主要用于处理数据如平均值，求和，最小最大值等，返回计算和的数据结果集\u003cbr /\u003e\n求和例子\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.aggregate([{$group:{_id:\"$age\",person_count:{$sum:1}}}])\n{ \"_id\" : 26, \"person_count\" : 1 }\n{ \"_id\" : 23, \"person_count\" : 1 }\n{ \"_id\" : 32, \"person_count\" : 1 }\n{ \"_id\" : 25, \"person_count\" : 1 }\n{ \"_id\" : 28, \"person_count\" : 2 }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e相当于\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect age,count(1) from person group by age\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e其他的不说了，举一反三去\u003c/p\u003e\n\n\u003ch2\u003e分页\u003c/h2\u003e\n\n\u003cp\u003e分页主要使用\u003cstrong\u003eMongoDB\u003c/strong\u003e的\u003cstrong\u003elimit\u003c/strong\u003e和\u003cstrong\u003eskip\u003c/strong\u003e方法\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; var n \u003d 2,i\u003d0;\n\u0026gt; db.person.find().limit(n).skip(i)\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154a\"), \"name\" : \"jack\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 25 }\n\u0026gt; i\u003d1;\n1\n\u0026gt; db.person.find().limit(n).skip(i*n)\n{ \"_id\" : ObjectId(\"573d5e850509f6bcd87168e7\"), \"name\" : \"jackson\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9a\"), \"name\" : \"mark\", \"age\" : 32 }\n\u0026gt; i\u003d2;\n2\n\u0026gt; db.person.find().limit(n).skip(i*n)\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9b\"), \"name\" : \"gavin\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9c\"), \"name\" : \"ask\", \"age\" : 26 }\n\u0026gt; i\u003d3;\n3\n\u0026gt; db.person.find().limit(n).skip(i*n)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e懂了吗，没懂？买点核桃补补脑，在不行买块豆腐，你懂的\u003cbr /\u003e\n简单点，用limit取指定数量的数据，同时skip控制从哪个记录开始取，也就是跳过的指定的数量的数据，这就是分页\u003c/p\u003e\n\n\u003ch4\u003e排序sort\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find().sort({\"age\":-1})\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9a\"), \"name\" : \"mark\", \"age\" : 32 }\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154a\"), \"name\" : \"jack\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573d5e850509f6bcd87168e7\"), \"name\" : \"jackson\", \"age\" : 28 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9c\"), \"name\" : \"ask\", \"age\" : 26 }\n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"573e6f63909519c1de8abd9b\"), \"name\" : \"gavin\", \"age\" : 25 }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e默认是1，按升序，-1就是降序\u003c/p\u003e\n\n\u003ch2\u003e游标\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eMongoDB\u003c/strong\u003e中的游标类似于延迟执行，类似于存储过程中的游标操作\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; var list \u003d db.person.find()\n\u0026gt; list.forEach(function(x){\n...   print(x.name);\n... })\njack\njoe\njackson\nmark\ngavin\nask\n\u0026gt; list\n\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e游标使用可以理解为提前申明一个“查询结构”，操作游标的时候才回去执行查询，游标也是一次性的操作，第一次操作完游标，就销毁了，第二次就没有数据返回了\u003cbr /\u003e\n内容真的是有点多了\u003c/p\u003e\n",
    "title": "MongoDB高级操作之聚合、分页、排序、游标",
    "post_tag": "MongoDB",
    "post_date": "2016-05-24 06:42:18"
}, {
    "content": "\u003cp\u003e这一章我们来详细说说\u003cstrong\u003eMongoDB\u003c/strong\u003e的增删改查，另外来一起感受下\u003cstrong\u003eJavaScript Shell\u003c/strong\u003e的强大\u003c/p\u003e\n\n\u003ch4\u003e批量插入\u003c/h4\u003e\n\n\u003cp\u003e上一章是每次插入一条数据\u003cstrong\u003eBson\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; var persons \u003d new Array()  \n\u0026gt; persons[0] \u003d {\"name\":\"jack\",\"age\":25}  \n\u0026gt; persons[1] \u003d {\"name\":\"joe\",\"age\":20}  \n\u0026gt; db.person.insert(persons)  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e一次插入两条数据，2P，宝宝震精了，js的语法，6不6\u003cbr /\u003e\n另外save方法也可以用于插入\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.save(document)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003e查询之条件操作\u003c/h2\u003e\n\n\u003cp\u003e\u003c!--more--\u003e\n查询所有\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find()  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在find之后加一个\u003cstrong\u003epretty\u003c/strong\u003e可以格式化查询结果\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find().pretty()  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e判断和逻辑查询\u003c/h4\u003e\n\n\u003cp\u003e常用的判断操作有\u003e,\u003e\u003d,\u0026lt;,\u0026lt;\u003d,!\u003d,\u003d\u003cbr /\u003e\n常用的逻辑操作有and,or,in,not in\u003cbr /\u003e\n在\u003cstrong\u003eMongoDB\u003c/strong\u003e中是这样的，上下一一对应\u003cbr /\u003e\n判断操作$gt,$gte,$lt,$lte,$ne,\"无关键字\"\u003cbr /\u003e\n逻辑操作\"无关键字\",$or,$in,$nin\u003cbr /\u003e\n先来看判断\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find({\"age\":{$gt:20})  /*查询age大于20*/   \n\u0026gt; db.person.find({\"age\":{$gte:20}})  /*查询age大于等于20*/  \n\u0026gt; db.person.find({\"age\":{$lt:25})  /*查询age小于25*/   \n\u0026gt; ......  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e大同小异，不一一列举了\u003cbr /\u003e\n逻辑\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find({\"name\":\"jack\",\"age\":20}) /* name是jack 和 age等于20 */  \n\u0026gt; db.person.find({$or:[{\"name\":\"joe\"},{\"age\":20}]}} /* name是jack 或者 age等于20 */   \n\u0026gt; db.person.find({\"age\",{$in:[20,25]}})  /* 同等于Sql中的 age in (20,25) */  \n\u0026gt; db.person.find({\"age\",{$nin:[20,25]}})  /* 同等于Sql中的 age not in (20,25) */  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand和or联合使用\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find({\"age\":{$gt:20},$or:[{\"name\":\"jack\"},{\"name\":\"joe\"}]})  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e相当于\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ewhere age \u0026gt; 20 and ( name \u003d \"jack\" or name \u003d \"joe\" )  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e$where\u003c/h4\u003e\n\n\u003cp\u003e纯属装13\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find({$where:function(){ return this.name\u003d\u003d\"jack\"}})  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003e更新update\u003c/h2\u003e\n\n\u003cp\u003e先来看下官方的文档\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edb.collection.update(\u0026lt;query\u0026gt;,\u0026lt;update\u0026gt;,{  \n    upsert:\u0026lt;boolean\u0026gt;,  \n    multi:\u0026lt;boolean\u0026gt;,  \n    writeConcern:\u0026lt;document\u0026gt;})  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e大致说明下五个参数的意思\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003equery\u003c/strong\u003e 查询条件，类似于sql update后面的where子句\u003cbr /\u003e\n  \u003cstrong\u003eupdate\u003c/strong\u003e 更新的对象，相当于sql update后面的set后面的\u003cbr /\u003e\n  \u003cstrong\u003eupsert\u003c/strong\u003e 可选，如果不存在则插入，默认false不插入，类似于saveOrUpdate，写了你反正也不看，反正后面还会在说\u003cbr /\u003e\n  \u003cstrong\u003emulti\u003c/strong\u003e 可选，默认false，只用于更新查询到的第一条数据，true则更新查询到的全部数据\u003cbr /\u003e\n  \u003cstrong\u003ewriteConcern\u003c/strong\u003e 可选，抛出的异常的级别\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003e$inc $set\u003c/h4\u003e\n\n\u003cp\u003e$inc increasa 增量，相当于+\u003d，在原来的值基础上加上新的值\u003cbr /\u003e\n$set 设置新的值\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.update({\"name\":\"joe\"},{$inc:{\"age\":25}})  \nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })  \n\u0026gt; db.person.find({\"name\":\"joe\"})  \n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 50 }  \n\u0026gt; db.person.update({\"name\":\"joe\"},{$set:{\"age\":25}})  \nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })  \n\u0026gt; db.person.find({\"name\":\"joe\"})  \n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 25 }  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eupsert\u003c/h4\u003e\n\n\u003cp\u003e如果不存在，则插入一条新的数据，相当于\u003cstrong\u003eHibernate\u003c/strong\u003e中的\u003cstrong\u003esaveOrUpdate\u003c/strong\u003e，默认是false改为true就可以了\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.update({\"name\":\"jackson\"},{$set:{\"age\":30}},true)  \nWriteResult({  \n    \"nMatched\" : 0,  \n    \"nUpserted\" : 1,  \n    \"nModified\" : 0,  \n    \"_id\" : ObjectId(\"573d5e850509f6bcd87168e7\")  \n})  \n\u0026gt; db.person.find()  \n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154a\"), \"name\" : \"jack\", \"age\" : 20 }  \n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 25 }  \n{ \"_id\" : ObjectId(\"573d5e850509f6bcd87168e7\"), \"name\" : \"jackson\", \"age\" : 30 }  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003e批量更新\u003c/h4\u003e\n\n\u003cp\u003eMongoDB默认是只更新查询到的第一条数据，把第四个参数改为true就可以咯\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.update({\"name\":/^jack/},{$set:{\"age\":28}},false,true)  \nWriteResult({ \"nMatched\" : 2, \"nUpserted\" : 0, \"nModified\" : 2 })  \n\u0026gt; db.person.find()  \n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154a\"), \"name\" : \"jack\", \"age\" : 28 }  \n{ \"_id\" : ObjectId(\"573c34362d0a6d2a3245154b\"), \"name\" : \"joe\", \"age\" : 25 }  \n{ \"_id\" : ObjectId(\"573d5e850509f6bcd87168e7\"), \"name\" : \"jackson\", \"age\" : 28 }  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eremove\u003c/h2\u003e\n\n\u003cp\u003e看一下文档吧\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edb.collection.remove(\u0026lt;query\u0026gt;,{  \n    justOne:\u0026lt;boolean\u0026gt;,  \n    writeConcern:\u0026lt;document\u0026gt;})  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e例子就不举了\u003cbr /\u003e\n脖子有点酸，就这样吧\u003c/p\u003e\n",
    "title": "MongoDB之增删改查详解",
    "post_tag": "MongoDB",
    "post_date": "2016-05-20 08:29:44"
}, {
    "content": "\u003cp\u003e新技术的更新实在是太快，数据库也不例外，你可以不会，但是你不能说不了解，来吧，一起来揭开\u003cstrong\u003eMongoDB\u003c/strong\u003e的神秘面纱\u003c/p\u003e\n\n\u003ch4\u003eMongoDB简介\u003c/h4\u003e\n\n\u003cp\u003e它是\u003cstrong\u003eNoSql\u003c/strong\u003e数据库的一类文档型数据库的一种，\u003cstrong\u003eMongoDB\u003c/strong\u003e是一个基于分布式存储的数据库，balabala……\u003cbr /\u003e\n它的优点是灵活可变的表结构，不需要像关系型数据库一样需要预先定义表结构，记住这一点、记住这一点、记住这一点\u003cbr /\u003e\nMongoDB不支持事务\u003c/p\u003e\n\n\u003ch4\u003eMongoDB安装\u003c/h4\u003e\n\n\u003cp\u003e首先到MongoDB官网下载对应自己的系统版本，然后解压到一个文件夹，我这里是E盘mongodb文件夹下\u003c/p\u003e\n\n\u003ch4\u003eMongoDB启动\u003c/h4\u003e\n\n\u003cp\u003e\u003c!--more--\u003e\nMongoDB启动需要指定数据库的路径，在mongodb文件夹下新建data文件夹作为存放数据库的文件夹，打开命令行\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; E:  \n\u0026gt; cd mongodb/bin  \n\u0026gt; mongod --dbpath\u003dE:/mongodb/data  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e会有一些日志打印在命令行窗口中，在打开一个命令��测试\u003cstrong\u003eMongoDB\u003c/strong\u003e是否启动成功\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\HONEY_GUO\u0026gt;E:\nE:\\\u0026gt;cd mongodb/bin\nE:\\mongodb\\bin\u0026gt;mongo  \nMongoDB shell version: 3.0.6\nconnecting to: test\n\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e此时\u003cstrong\u003eMongoDB\u003c/strong\u003e成功启动，并打印出版本信息，同时也打开\u003cstrong\u003eMongoDB\u003c/strong\u003e的\u003cstrong\u003eJavaScript Shell\u003c/strong\u003e\u003cbr /\u003e\n也许你不想看到命令行窗口的一行行日志，你可以用下面方式去改变他\u003cbr /\u003e\n在mongodb文件夹下新建一个文件mongodb.config\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edbpath\u003dE:\\mongodb\\data\nlogpath\u003dE:\\mongodb\\log\\mongodb.log\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e然后启动\u003cstrong\u003eMongoDB\u003c/strong\u003e时可以这样\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;mongod --config E:/mongodb/mongodb.config  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e同时指定数据库和日志文件的路径\u003cbr /\u003e\n也许你觉得这个麻烦，每次启动需要用命令行来启动，那么你可以将\u003cstrong\u003eMongoDB\u003c/strong\u003e做成想\u003cstrong\u003eMySql\u003c/strong\u003e一样系统服务，随电脑启动而开启，方法自行百度，我反正喜欢命令行，爱用不用吧\u003c/p\u003e\n\n\u003ch2\u003eMongoDB基本操作增删改查\u003c/h2\u003e\n\n\u003cp\u003e进入\u003cstrong\u003eMongoDB\u003c/strong\u003e的\u003cstrong\u003eJavaScript Shell\u003c/strong\u003e，我在强调这是个\u003cstrong\u003eJavaScript Shell\u003c/strong\u003e吗，好了已经三遍了，怎么强大，下章绝对让你震精\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eC:\\Users\\HONEY_GUO\u0026gt;E:  \nE:\\\u0026gt;cd mongodb/bin  \nE:\\mongodb\\bin\u0026gt;mongo  \nMongoDB shell version: 3.0.6\nconnecting to: test\n\u0026gt;  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e默认连接的是test数据库\u003c/p\u003e\n\n\u003ch4\u003einset 添加\u003c/h4\u003e\n\n\u003cp\u003e我们给文档集合取名为\u003cstrong\u003eperson\u003c/strong\u003e，\u003cstrong\u003eMongoDB\u003c/strong\u003e文档其实就是\u003cstrong\u003eJson\u003c/strong\u003e格式的扩展\u003cstrong\u003eBson\u003c/strong\u003e形式\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.insert({\"name\":\"jack\",\"age\":20})  \n\u0026gt; db.person.insert({\"name\":\"joe\",\"age\":25})  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003efind 查询\u003c/h4\u003e\n\n\u003cp\u003e数据的插入当然就是为了查询\u003cstrong\u003efind\u003c/strong\u003e，否则插了也白插，白插谁不插，呜呜呜~\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find()  \n\u0026gt; db.person.find({\"name\":\"joe\"})  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eupdate 更新\u003c/h4\u003e\n\n\u003cp\u003e原来的值和更新的值，很好理解的\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.uodate({\"name\":\"joe\"},{\"name\":\"joe\",\"age\":30})\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eremove 删除\u003c/h4\u003e\n\n\u003cp\u003e在\u003cstrong\u003eMongoDB\u003c/strong\u003e中删除是个很危险的操作，是不可逆的，三思而后行\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.remove({\"name\":\"joe\"})    \n\u0026gt; db.person.remove({})\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e最后一种是全部删除，然后再查询一下\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt; db.person.find()\n\u0026gt; db.person.count()\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e好了，已经没数据了，以后就用\u003cstrong\u003eMarkDown\u003c/strong\u003e写了，挺好用的，代码部分折腾了半天，结束，Hungry~\u003c/p\u003e\n",
    "title": "初识MongoDB之安装和增删改查",
    "post_tag": "MongoDB",
    "post_date": "2016-05-19 08:45:20"
}, {
    "content": "Bootstrap用于页面美化，直接引入样式文件，使用AngularJs完成CRUD操作\n\u003ch2\u003eAngularJs Bootstrap CRUD\u003c/h2\u003e\n\u003c!--more--\u003e\n\u003cpre class\u003d\"lang:default decode:true \"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;AngularJs Bootstrap CRUD\u0026lt;/title\u0026gt;\n    \u0026lt;link rel\u003d\"stylesheet\" type\u003d\"text/css\" href\u003d\"http://lib.sinaapp.com/js/bootstrap/3.0.0/css/bootstrap.min.css\"\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"myApp\" ng-controller\u003d\"myCtrl\"\u0026gt;\n    \u0026lt;div class\u003d\"container\"\u0026gt;\n        \u0026lt;h3\u0026gt;Users\u0026lt;/h3\u0026gt;\n        \u0026lt;table class\u003d\"table table-striped table-bordered\"\u0026gt;\n            \u0026lt;thead\u0026gt;\n                \u0026lt;tr\u0026gt;\n                \u0026lt;th\u0026gt;\u0026lt;a href\u003d\"javascript:;\" ng-click\u003d\"predicate \u003d \u0027id\u0027; reverse\u003d!reverse\" title\u003d\"orderBy Id\"\u0026gt;Id\u0026lt;/a\u0026gt;\u0026lt;/th\u0026gt;\n                    \u0026lt;th\u0026gt;First Name\u0026lt;/th\u0026gt;\n                    \u0026lt;th\u0026gt;Last Name\u0026lt;/th\u0026gt;\n                    \u0026lt;th\u0026gt;Edit\u0026lt;/th\u0026gt;\n                \u0026lt;/tr\u0026gt;\n            \u0026lt;/thead\u0026gt;\n            \u0026lt;tbody\u0026gt;\n                \u0026lt;tr ng-repeat\u003d\"user in users | orderBy:predicate:reverse\"\u0026gt;\n                    \u0026lt;td\u0026gt;{{ user.id}}\u0026lt;/td\u0026gt;\n                    \u0026lt;td\u0026gt;{{ user.fName }}\u0026lt;/td\u0026gt;\n                    \u0026lt;td\u0026gt;{{ user.lName }}\u0026lt;/td\u0026gt;\n                    \u0026lt;td\u0026gt;\n                        \u0026lt;button class\u003d\"btn btn-default\" ng-click\u003d\"editUser(user.id)\"\u0026gt;Edit\n                        \u0026lt;/button\u0026gt;\n                    \u0026lt;/td\u0026gt;\n                \u0026lt;/tr\u0026gt;\n            \u0026lt;/tbody\u0026gt;\n        \u0026lt;/table\u0026gt;\n        \u0026lt;hr\u0026gt;\n        \u0026lt;button class\u003d\"btn btn-success\" ng-click\u003d\"editUser(\u0027new\u0027)\"\u0026gt;Create New User\n        \u0026lt;/button\u0026gt;\n        \u0026lt;hr\u0026gt;\n        \u0026lt;h3 ng-show\u003d\"edit\"\u0026gt;Create New User:\u0026lt;/h3\u0026gt;\n        \u0026lt;h3 ng-hide\u003d\"edit\"\u0026gt;Edit User:\u0026lt;/h3\u0026gt;\n        \u0026lt;form class\u003d\"form-horizontal\"\u0026gt;\n            \u0026lt;div class\u003d\"form-group\"\u0026gt;\n                \u0026lt;label class\u003d\"col-sm-2 control-label\"\u0026gt;First Name:\u0026lt;/label\u0026gt;\n                \u0026lt;div class\u003d\"col-md-4\"\u0026gt;\n                    \u0026lt;input type\u003d\"text\" class\u003d\"form-control\" ng-model\u003d\"fName\" placeholder\u003d\"First Name\"\u0026gt;\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n            \u0026lt;div class\u003d\"form-group\"\u0026gt;\n                \u0026lt;label class\u003d\"col-sm-2 control-label\"\u0026gt;Last Name:\u0026lt;/label\u0026gt;\n                \u0026lt;div class\u003d\"col-md-4\"\u0026gt;\n                    \u0026lt;input type\u003d\"text\" class\u003d\"form-control\" ng-model\u003d\"lName\" placeholder\u003d\"Last Name\"\u0026gt;\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n            \u0026lt;div class\u003d\"form-group\"\u0026gt;\n                \u0026lt;label class\u003d\"col-sm-2 control-label\"\u0026gt;Password:\u0026lt;/label\u0026gt;\n                \u0026lt;div class\u003d\"col-md-4\"\u0026gt;\n                    \u0026lt;input type\u003d\"password\" class\u003d\"form-control\" ng-model\u003d\"passw1\" placeholder\u003d\"Password\"\u0026gt;\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n            \u0026lt;div class\u003d\"form-group\"\u0026gt;\n                \u0026lt;label class\u003d\"col-sm-2 control-label\"\u0026gt;Repeat:\u0026lt;/label\u0026gt;\n                \u0026lt;div class\u003d\"col-md-4\"\u0026gt;\n                    \u0026lt;input type\u003d\"password\" class\u003d\"form-control\" ng-model\u003d\"passw2\" placeholder\u003d\"Repeat Password\"\u0026gt;\n                \u0026lt;/div\u0026gt;\n            \u0026lt;/div\u0026gt;\n        \u0026lt;/form\u0026gt;\n        \u0026lt;hr\u0026gt;\n        \u0026lt;button class\u003d\"btn btn-success\" ng-disabled\u003d\"error || incomplete\" ng-click\u003d\"saveUser()\"\u0026gt;Save Changes\n        \u0026lt;/button\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    angular.module(\u0027myApp\u0027, []).controller(\u0027myCtrl\u0027, function($scope) {\n        $scope.uidIdx \u003d -1;\n        $scope.users \u003d [{\n            id: 1,\n            fName: \u0027F_Name\u0027,\n            lName: \u0027LName\u0027\n        }, {\n            id: 2,\n            fName: \u0027First Name\u0027,\n            lName: \u0027Last Name\u0027\n        }, {\n            id: 3,\n            fName: \u0027First Name\u0027,\n            lName: \u0027Last Name\u0027\n        }, {\n            id: 4,\n            fName: \u0027First Name\u0027,\n            lName: \u0027Last Name\u0027\n        }, {\n            id: 5,\n            fName: \u0027First Name\u0027,\n            lName: \u0027Last Name\u0027\n        }, ]\n\n        var empty \u003d \"\";\n        $scope.reset \u003d function() {\n            $scope.fName \u003d empty;\n            $scope.lName \u003d empty;\n            $scope.passw1 \u003d empty;\n            $scope.passw2 \u003d empty;\n        }\n        $scope.reset();\n\n        $scope.edit \u003d true;\n        $scope.error \u003d false;\n        $scope.incomplete \u003d true;\n\n        $scope.editUser \u003d function(id) {\n            if (id \u003d\u003d \u0027new\u0027) {\n                $scope.edit \u003d true;\n                $scope.incomplete \u003d true;\n                $scope.reset();\n                $scope.uidIdx \u003d -1;\n            } else {\n                $scope.edit \u003d false;\n                $scope.fName \u003d $scope.users[id - 1].fName;\n                $scope.lName \u003d $scope.users[id - 1].lName;\n                $scope.uidIdx \u003d id - 1;\n            }\n        }\n\n        $scope.saveUser \u003d function() {\n            if ($scope.uidIdx \u003d\u003d -1) {\n                $scope.users.push({\n                    id: $scope.users.length + 1,\n                    fName: $scope.fName,\n                    lName: $scope.lName\n                });\n                return;\n            }\n\n            $scope.users[$scope.uidIdx].fName \u003d $scope.fName;\n            $scope.users[$scope.uidIdx].lName \u003d $scope.lName;\n        }\n\n        $scope.$watch(\u0027passw1\u0027, function() {\n            $scope.test();\n        });\n        $scope.$watch(\u0027passw2\u0027, function() {\n            $scope.test();\n        });\n        $scope.$watch(\u0027fName\u0027, function() {\n            $scope.test();\n        });\n        $scope.$watch(\u0027lName\u0027, function() {\n            $scope.test();\n        });\n\n        $scope.test \u003d function() {\n            if ($scope.passw1 !\u003d\u003d $scope.passw2) {\n                $scope.error \u003d true;\n            } else {\n                $scope.error \u003d false;\n            }\n            $scope.incomplete \u003d false;\n            if ($scope.edit \u0026amp;\u0026amp; (!$scope.fName.length ||\n                    !$scope.lName.length ||\n                    !$scope.passw1.length || !$scope.passw2.length)) {\n                $scope.incomplete \u003d true;\n            }\n        }\n    })\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003ca title\u003d\"AngularJs Bootstrap CRUD\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_bootstrap_crud.html\" target\u003d\"_blank\"\u003e\u003cspan style\u003d\"color: #ff0000;\"\u003e 查看DEMO\u003c/span\u003e\u003c/a\u003e",
    "title": "AngularJs 、Bootstrap简单应用之CRUD操作",
    "post_tag": "AngularJs",
    "post_date": "2015-10-25 08:51:23"
}, {
    "content": "除AngularJs的基本特性外，它也有一些非常优秀的插件，\n\u003cul\u003e\n\t\u003cli\u003engSanitize 用于解析html标签，绑定数据到html标签\u003c/li\u003e\n\t\u003cli\u003engRoute 路由功能\u003c/li\u003e\n\t\u003cli\u003engAnimate 动画\u003c/li\u003e\n\u003c/ul\u003e\n使用AngularJs插件时需要引入插件js，如angular-sanitize.min.js\n\u003ch2\u003engSanitize 使用\u003c/h2\u003e\n\u003c!--more--\u003e\n\u003cpre class\u003d\"lang:default decode:true \"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;Angular ngSanitze\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"myApp\"\u0026gt;\n    \u0026lt;div ng-controller\u003d\"myCtrl\"\u0026gt;\n        Snippet:\n        \u0026lt;textarea ng-model\u003d\"snippet\" cols\u003d\"60\" rows\u003d\"3\"\u0026gt;\u0026lt;/textarea\u0026gt;\n        \u0026lt;pre\u0026gt;\u0026lt;div ng-bind-html\u003d\"deliberatelyTrustDangerousSnippet()\"\u0026gt;\n\u0026lt;/div\u0026gt;\u0026lt;/pre\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular-sanitize.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    var myApp \u003d angular.module(\u0027myApp\u0027, [\u0027ngSanitize\u0027]);\n    myApp.controller(\u0027myCtrl\u0027, function($scope, $sce) {\n        $scope.snippet \u003d\n            \u0027\u0026lt;p style\u003d\"color:blue\"\u0026gt;an html\\n\u0027 +\n            \u0027\u0026lt;em onmouseover\u003d\"this.textContent\u003d\\\u0027PWN3D!\\\u0027\"\u0026gt;click here\u0026lt;/em\u0026gt;\\n\u0027 +\n            \u0027snippet\u0026lt;/p\u0026gt;\u0027;\n        $scope.deliberatelyTrustDangerousSnippet \u003d function() {\n            return $sce.trustAsHtml($scope.snippet);\n        };\n    })\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003cspan style\u003d\"color: #ff0000;\"\u003e\u003ca style\u003d\"color: #ff0000;\" title\u003d\"Angularjs ngSanitize\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_ngsanitize.html\" target\u003d\"_blank\"\u003e 查看DEMO\u003c/a\u003e\u003c/span\u003e\n\u003ch2\u003engRoute 路由\u003c/h2\u003e\nAngularJS 路由功能是一个纯前端的解决方案，在前面也详细的介绍过，简单的来说，AngularJS 的前端路由，需求提前对指定的(ng-app)，定义路由规则(routeProvider)，然后通过不同的 URL，告诉(ng-app)加载哪个页面(HTML)，再渲染到(ng-app)视图(ng-view)中。\n\n关于AngularJs ngRoute路由使用可以查看\u003ca href\u003d\"http://guocb.com/718.html\" target\u003d\"_blank\"\u003e Angular路由和模板\u003c/a\u003e\n\u003ch2\u003engAnimate 动画\u003c/h2\u003e\n为应用提供动画效果，可以配合 CSS 使用\n\u003cpre class\u003d\"lang:default decode:true \"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;AngularJs ngAnimate\u0026lt;/title\u0026gt;\n    \u0026lt;style type\u003d\"text/css\"\u0026gt;\n    div.dg {\n        transition: all ease 0.2s;\n        background-color: lightblue;\n        height: 100px;\n    }\n    \n    .ng-hide {\n        height: 0;\n    }\n    \u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"myApp\"\u0026gt;\n    \u0026lt;div \u0026gt;\n    \t\u0026lt;h1\u0026gt;隐藏DIV：\u0026lt;input type\u003d\"checkbox\" ng-model\u003d\"ckb\"\u0026gt;\u0026lt;/h1\u0026gt;\n    \t\u0026lt;div class\u003d\"dg\" ng-hide\u003d\"ckb\"\u0026gt;\u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular-animate.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    var myApp \u003d angular.module(\u0027myApp\u0027, [\u0027ngAnimate\u0027]);\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003ca style\u003d\"color: #ff0000;\" title\u003d\"Angularjs ngAnimate\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_nganimate.html\" target\u003d\"_blank\"\u003e 查看DEMO\u003c/a\u003e\n\u003ch4\u003engAnimate 动画相关的指令\u003c/h4\u003e\n\u003cul\u003e\n\t\u003cli\u003eng-show\u003c/li\u003e\n\t\u003cli\u003eng-hide\u003c/li\u003e\n\t\u003cli\u003eng-enter\u003c/li\u003e\n\t\u003cli\u003eng-move\u003c/li\u003e\n\t\u003cli\u003eng-leave\u003c/li\u003e\n\t\u003cli\u003eng-animate，ng-hide-animate\u003c/li\u003e\n\u003c/ul\u003e\n除此之外，还有\n\u003cul\u003e\n\t\u003cli\u003engTouch 支持触摸设备的插件\u003c/li\u003e\n\t\u003cli\u003engResource 对HTTP请求资源管理插件\u003c/li\u003e\n\t\u003cli\u003engCookies 浏览器Cookie支持\u003c/li\u003e\n\u003c/ul\u003e\n等等",
    "title": "AngularJs ngSanitize ngRoute ngAnimate插件",
    "post_tag": "AngularJs",
    "post_date": "2015-10-18 08:51:23"
}, {
    "content": "\u003cstrong\u003eAngularJs\u003c/strong\u003e强大的路由和模板功能，是\u003cstrong\u003eAngularJs\u003c/strong\u003e单页面应用的核心\n\u003ch2\u003eAngularJs路由和模板\u003c/h2\u003e\n\u003cstrong\u003eAngularJs\u003c/strong\u003e的路由功能可以完成和服务器后台路由（\u003cstrong\u003eURL对应VIEW视图模板\u003c/strong\u003e）一样的功能，不一样的是\u003cstrong\u003eAngularJs\u003c/strong\u003e路由是一个纯前端的路由解决方案，需要提前指定\u003cstrong\u003eng-app\u003c/strong\u003e（即单页面应用唯一标识），定义路由规则（\u003cstrong\u003erouteProvider\u003c/strong\u003e），然后通过不同的\u003cstrong\u003eURL\u003c/strong\u003e，告诉（\u003cstrong\u003eng-app\u003c/strong\u003e）加载哪个模板（\u003cstrong\u003eHTML\u003c/strong\u003e），再渲染到（\u003cstrong\u003eng-app\u003c/strong\u003e）视图（\u003cstrong\u003eng-view\u003c/strong\u003e）中，\u003cstrong\u003eAngularJs\u003c/strong\u003e路由依赖于\u003cstrong\u003engRoute\u003c/strong\u003e模块，使用需要单独引入该模块\n\u003ch2\u003eAngularJs路由和模板实例\u003c/h2\u003e\n书籍列表和查看书籍详情的应用，以\u003cstrong\u003eindex.html\u003c/strong\u003e页面所在目录作为该应用的根目录\n\n代码文件\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eindex.html\u003c/strong\u003e 应用主页面\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003etemplate/book_list.html\u003c/strong\u003e 书籍列表模版页\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003etemplate/book_item.html\u003c/strong\u003e 书籍详情模版页\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003edata/book.json\u003c/strong\u003e 书籍数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e应用数据book.json\u003c/h4\u003e\n\u003c!--more--\u003e\n\u003ch4\u003e\u003c/h4\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e{\n    \"books\": [{\n        \"id\": 1,\n        \"name\": \"Java编程思想\",\n        \"author\": \"埃克尔\",\n        \"description\": \"适合初学者与专业人员学习的书籍，是JAVA程序员的必备书籍。\"\n    }, {\n        \"id\": 2,\n        \"name\": \"算法导论\",\n        \"author\": \"Thomas H.Cormen，Charles E.Leiserson，Ronald L.Rivest，Clifford Stein\",\n        \"description\": \"全书选材经典、内容丰富、结构合理、逻辑清晰，对本科生的数据结构课程和研究生的算法课程都是非常实用的教材，在IT专业人员的职业生涯中，本书也是一本案头必备的参考书或工程实践手册。\"\n    }, {\n        \"id\": 3,\n        \"name\": \"JavaScript高级程序设计\",\n        \"author\": \"Nicholas C. Zakas \",\n        \"description\": \"全书从JavaScript语言实现的各个组成部分——语言核心、DOM、BOM、事件模型讲起，深入浅出地探讨了面向对象编程、Ajax与Comet服务器端通信，HTML5表单、媒体、Canvas(包括WebGL)及WebWorkers、地理定位、跨文档传递消息、客户端存储(包括IndexedDB)等新API，还介绍了离线应用和与维护、性能、部署相关的最佳开发实践。\"\n    }, {\n        \"id\": 4,\n        \"name\": \"JavaScript权威指南\",\n        \"author\": \"弗兰纳根\",\n        \"description\": \"本书要讲述的内容涵盖JavaScript语言本身，以及Web浏览器所实现的JavaScript API。本书更适合有一定编程经验的人阅读。\"\n    }, {\n        \"id\": 5,\n        \"name\": \"HTML5+CSS3从入门到精通\",\n        \"author\": \"DongBo Li\",\n        \"description\": \"《HTML5+CSS3从入门到精通》内容翔实、结构清晰、循序渐进，基础知识与案例实战紧密结合，既可作为HTML5+CSS3初学者的入门教材，也适合作为中高级用户对新技术作进一步学习的参考用书。\"\n    }, {\n        \"id\": 6,\n        \"name\": \"用AngularJS开发下一代Web应用\",\n        \"author\": \"Brad Green, Shyam Seshadri\",\n        \"description\": \"AngularJS是一款来自Google的前端JS框架，它的核心特性有：MVC、双向数据绑定、指令和语义化标签、模块化工具、依赖注入、HTML模板，以及对常用工具的封装，例如$http、$cookies、$location等。AngularJS框架的体积非常小，但是设计理念和功能却非常强大，值得前端开发者深入学习\"\n    }]\n}\n\u003c/pre\u003e\n\u003ch4\u003e模版页面\u003c/h4\u003e\n书籍列表\u003cstrong\u003ebook_list.html\u003c/strong\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;ul\u0026gt;\n    \u0026lt;li ng-repeat\u003d\"book in books\"\u0026gt;\u0026lt;a href\u003d\"#/book/{{book.id}}\"\u0026gt;{{book.name}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u003c/pre\u003e\n\u003cstrong\u003e \u003c/strong\u003e书籍详情\u003cstrong\u003ebook_item.html\u003c/strong\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;p\u0026gt;\u0026lt;a href\u003d\"#/book\"\u0026gt;返回\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\n\u0026lt;h2\u0026gt;{{book.name}}\u0026lt;/h2\u0026gt;\n\u0026lt;blockquote\u0026gt;\n    \u0026lt;p\u0026gt;作者 : {{book.author}}\u0026lt;/p\u0026gt;\n    \u0026lt;p\u0026gt;描述 : {{book.description}}\u0026lt;/p\u0026gt;\n\u0026lt;/blockquote\u0026gt;\u003c/pre\u003e\n\u003ch4\u003e 应用主页面index.html，包含ng-app标识，和ng-view视图\u003c/h4\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;AngularJs Route Service\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"routeApp\"\u0026gt;\n    \u0026lt;div ng-view\u0026gt;\u0026lt;/div\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular-route.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    var routeApp \u003d angular.module(\u0027routeApp\u0027, [\u0027ngRoute\u0027])\n\n    routeApp.config(function($routeProvider) {\n        $routeProvider\n            .when(\u0027/book\u0027, {\n                templateUrl: \u0027template/book_list.html\u0027,\n                controller: \u0027BookListCtrl\u0027\n            })\n            .when(\u0027/book/:id\u0027, {\n                templateUrl: \u0027template/book_item.html\u0027,\n                controller: \u0027BookItemCtrl\u0027\n            })\n            .otherwise({\n                redirectTo: \u0027/book\u0027\n            });\n    });\n\n    routeApp.controller(\u0027BookListCtrl\u0027, function($scope, $http) {\n        $scope.books \u003d [];\n        $http.get(\u0027./data/book.json\u0027).success(function(data) {\n            $scope.books \u003d data.books;\n        })\n    });\n\n    routeApp.controller(\u0027BookItemCtrl\u0027, function($scope, $http, $routeParams) {\n        $http.get(\u0027./data/book.json\u0027).success(function(data) {\n            $scope.book \u003d data.books[$routeParams.id - 1];\n        })\n    });\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003cspan style\u003d\"color: #ff0000;\"\u003e \u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Route\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_route.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\u003c/span\u003e\n\n运行该实例可以发现，浏览器中的URL是这样的\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003ehttp://localhost/\u003c/strong\u003e 首页\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003ehttp://localhost/#/book/\u003c/strong\u003e1 详情页\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003ehttp://localhost/#/book\u003c/strong\u003e 详情页的返回\u003cstrong\u003eURL\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003e去掉AngularJs路由URL的#号\u003c/h2\u003e\n使用\u003cstrong\u003e$locationProvider\u003c/strong\u003e的\u003cstrong\u003ehtml5Mode\u003c/strong\u003e方法，参数为一个标识是否是\u003cstrong\u003eHTML5\u003c/strong\u003e应用的布尔值\n\u003ch4\u003e修改index.html\u003c/h4\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;AngularJs Route Service\u0026lt;/title\u0026gt;\n    \u0026lt;base href\u003d\"http://guocb.sinaapp.com/angularjs/\"/\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"routeApp\"\u0026gt;\n    \u0026lt;div ng-view\u0026gt;\u0026lt;/div\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular-route.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    var routeApp \u003d angular.module(\u0027routeApp\u0027, [\u0027ngRoute\u0027])\n\n    routeApp.config(function($routeProvider, $locationProvider) {\n        $routeProvider\n            .when(\u0027/book\u0027, {\n                templateUrl: \u0027template/book_list.html\u0027,\n                controller: \u0027BookListCtrl\u0027\n            })\n            .when(\u0027/book/:id\u0027, {\n                templateUrl: \u0027template/book_item.html\u0027,\n                controller: \u0027BookItemCtrl\u0027\n            })\n            .otherwise({\n                redirectTo: \u0027/book\u0027\n            });\n        $locationProvider.html5Mode(!0);\n    });\n\n    routeApp.controller(\u0027BookListCtrl\u0027, function($scope, $http) {\n        $scope.books \u003d [];\n        $http.get(\u0027./data/book.json\u0027).success(function(data) {\n            $scope.books \u003d data.books;\n        })\n    });\n\n    routeApp.controller(\u0027BookItemCtrl\u0027, function($scope, $http, $routeParams) {\n        $http.get(\u0027./data/book.json\u0027).success(function(data) {\n            $scope.book \u003d data.books[$routeParams.id - 1];\n        })\n    });\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n在\u003cstrong\u003eindex.html\u003c/strong\u003e文件中\u003cstrong\u003ehead\u003c/strong\u003e标签中添加\u003cstrong\u003ebase\u003c/strong\u003e标签，\u003cstrong\u003ehref\u003c/strong\u003e为当前页面所在地址（作为应用的根目录），在实际开发中应用主页面往往就在网站根目录下，所以是不需要指定\u003cstrong\u003ebase\u003c/strong\u003e的\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;base href\u003d\"http://guocb.sinaapp.com/angularjs/\"/\u0026gt;\u003c/pre\u003e\n在路由和模板的配置中添加\n\u003cpre class\u003d\"lang:default decode:true\"\u003e$locationProvider.html5Mode(!0);\u003c/pre\u003e\n此时我们在访问该应用，\u003cstrong\u003eURL\u003c/strong\u003e中的\u003cstrong\u003e#\u003c/strong\u003e号就没有了\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003ehttp://localhost/book/\u003c/strong\u003e1 详情页\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003ehttp://localhost/book\u003c/strong\u003e 详情页的返回列表页\u003cstrong\u003eURL\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u0026nbsp;\n\n\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Route\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_route.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\n\n此时\u003cstrong\u003eURL\u003c/strong\u003e中的\u003cstrong\u003e#\u003c/strong\u003e号虽然没有了，但是如果直接打开列表页和详情页或者在该页面刷新时出现了\u003cstrong\u003e404\u003c/strong\u003e的错误\n\u003ch2\u003e解决直接打开AngularJs应用URL时的404错误\u003c/h2\u003e\n由于在\u003cstrong\u003eAngularJs\u003c/strong\u003e应用的入口配置了路由和模板的访问规则，我们通过\u003cstrong\u003eURL\u003c/strong\u003e直接访问其中路由时，会首先访问该应用的后台\u003cstrong\u003eURL\u003c/strong\u003e，不会访问到通过\u003cstrong\u003eAngularJs\u003c/strong\u003e配置的路由规则，出现了\u003cstrong\u003e404\u003c/strong\u003e的错误\n\n\u003cstrong\u003eAngularJs\u003c/strong\u003e的路由规则实际上是以应用标识\u003cstrong\u003eng-app\u003c/strong\u003e所在页面地址对应的自身URL后以（#/）加上所有路由匹配的规则的URL，如应用标识在\u003cstrong\u003eindex.html\u003c/strong\u003e页面，如果访问\u003cstrong\u003ebook\u003c/strong\u003e即实际路径为\u003cstrong\u003eindex.html#/book\u003c/strong\u003e。根据此特性我们重写\u003cstrong\u003eWEB\u003c/strong\u003e服务器中的\u003cstrong\u003eURL\u003c/strong\u003e规则即可，如\u003cstrong\u003eApache\u003c/strong\u003e、\u003cstrong\u003eNginx\u003c/strong\u003e等都支持可以对URL重写\n\u003ch4\u003e\u003cstrong\u003eApache\u003c/strong\u003e服务器下，添加\u003cstrong\u003eURL\u003c/strong\u003e的重写规则\u003c/h4\u003e\n在\u003cstrong\u003eindex.html\u003c/strong\u003e文件同目录下\u003cstrong\u003e.htaccess\u003c/strong\u003e文件中添加，或者直接写在网站配置文件\u003cstrong\u003evhosts.conf\u003c/strong\u003e中标签\u003cstrong\u003eVirtualHost\u003c/strong\u003e内\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;IfModule rewrite_module\u0026gt; \nRewriteEngine On \nRewriteRule ^(book.*)$ angularjs_route.html#/$1\n\u0026lt;/IfModule\u0026gt;\u003c/pre\u003e\n\u003ch4\u003enginx服务器\u003c/h4\u003e\n同理在相应配置文件中添加url的重写规则\n\u003cpre class\u003d\"lang:default decode:true\"\u003erewrite  ^(book.*)$ angularjs_route.html#/$1\u003c/pre\u003e\n此时一个完整的AngularJs应用就完成了\n\n\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Route\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_route.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\n\n最后为了我们的应用更加有利于\u003cstrong\u003eSEO\u003c/strong\u003e，可以将页面\u003cstrong\u003ea\u003c/strong\u003e标签中\u003cstrong\u003ehref\u003c/strong\u003e属性中的链接中（\u003cstrong\u003e#/\u003c/strong\u003e）去掉了",
    "title": "AngularJS 路由和模板",
    "post_tag": "AngularJs",
    "post_date": "2015-09-23 04:19:07"
}, {
    "content": "\u003cstrong\u003eAngularJs Http\u003c/strong\u003e 是 \u003cstrong\u003eAngularJs \u003c/strong\u003e的核心服务，通过内置对象 \u003cstrong\u003e$http\u003c/strong\u003e 调用相应方法，通过浏览器\u003cstrong\u003eXMLHttpRequest \u003c/strong\u003e对象，完成与服务器通信，获取数据等操作\n\n\u003cstrong\u003e $http API \u003c/strong\u003e是基于延迟/许诺（\u003cstrong\u003edeferred\u003c/strong\u003e/\u003cstrong\u003epromise\u003c/strong\u003e）由\u003cstrong\u003e AngularJs\u003c/strong\u003e \u003cstrong\u003e$q \u003c/strong\u003e服务 \u003cstrong\u003eAPI \u003c/strong\u003e暴露，简单的使用模式可以快速完成\u003cstrong\u003eHTTP\u003c/strong\u003e请求\n\u003ch4\u003e通用使用方法\u003c/h4\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e $http({method: \u0027GET\u0027, url: \u0027/someUrl\u0027}).\n    success(function(data, status, headers, config) {\n      // this callback will be called asynchronously\n      // when the response is available\n    }).\n    error(function(data, status, headers, config) {\n      // called asynchronously if an error occurs\n      // or server returns response with an error status.\n    });\u003c/pre\u003e\n\u003cstrong\u003e$http\u003c/strong\u003e 通过 \u003cstrong\u003ejson \u003c/strong\u003e对象参数方式发送请求，一个参数对应一个值的方式，可以包含请求的参数如方法 \u003cstrong\u003emethod \u003c/strong\u003e，请求地址\u003cstrong\u003e url \u003c/strong\u003e，并返回\u003cstrong\u003e success \u003c/strong\u003e和\u003cstrong\u003e error \u003c/strong\u003e两个方法获取相应成功或失败的信息\n\n\u003cstrong\u003e$http(config) 参数\u003c/strong\u003e\n\n参数对象可以具有下面属性\n\u003ctable class\u003d\"table table-striped \"\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e详情\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003emethod\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eHTPP 方法（ \"GET\", \"POST\", \"PUT\", \"DELETE\")等\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e用于请求的URL\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eparams\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring|Object\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e请求URL发送的参数，字符串形式的 KEY-VALUE 如 ?key1\u003dvalue1\u0026amp;key2\u003dvalue2 ，或者是一个 JSON 格式的对象\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edata\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring|Object\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e用于请求URL发送的数据\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e用于请求URL设置的头信息，如{‘Accept’: ‘application/json, text/plain’}\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003exsrfHeaderName\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eHTTP 头信息的 XSRF 令牌（token）名字\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003exsrfCookieName\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e含有 XSRF 令牌（token） cookie 的名字\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etransformRequest\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efunction\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eHTTP 请求的头信息的转换（序列化）函数\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etransformResponse\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efunction\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eHTTP 相应的主体和头信息的转换（序列化）函数\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ecache\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean|Cache\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e如果true 将缓存 $http.get 方法的请求,缓存由AngularJs 对象 $cacheFactory 完成\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etimeout\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enumber|Promise\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e请求超时的毫秒数，或者一个承诺基于AngularJs $q 完成超时中止操作\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ewithCredentials\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e是否设置证书的 XHR 对象\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eresponseType\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e响应数据的类型，如 text，json，arraybuffer，blog，document 等\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c!--more--\u003e\n\u003ch4\u003e返回方法的参数说明\u003c/h4\u003e\n返回的两个方法\n\u003cpre class\u003d\"\"\u003e success(function(data, status, headers, config) { })\n error(function(data, status, headers, config) { })\u003c/pre\u003e\n参数说明\n\u003ctable class\u003d\"table table-striped \"\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e详情\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edata\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring|Object\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e相应的数据\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003estatus\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enumber\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e响应的HTTP状态代码\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efunction\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e获取头信息的函数\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003econfig\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e用于生成请求的配置对象\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003estatusText\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e响应的HTTP状态文本\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003e短方法列表\u003c/h4\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003e$http.head() \u003c/strong\u003e执行 \u003cstrong\u003eHEAD \u003c/strong\u003e请求的短方法\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$http.get() \u003c/strong\u003e执行 \u003cstrong\u003eGET \u003c/strong\u003e请求的短方法\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$http.post() \u003c/strong\u003e执行 \u003cstrong\u003ePOST \u003c/strong\u003e请求的短方法\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$http.put() \u003c/strong\u003e执行 \u003cstrong\u003ePUT \u003c/strong\u003e请求的短方法\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$http.delete() \u003c/strong\u003e执行\u003cstrong\u003eDELETE\u003c/strong\u003e请求的短方法\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$http.jsonp() \u003c/strong\u003e执行\u003cstrong\u003e \u003c/strong\u003e\u003cstrong\u003eJSONP \u003c/strong\u003e请求的短方法\u003c/li\u003e\n\u003c/ul\u003e\n短方法示例\n\u003cpre class\u003d\"lang:default decode:true\"\u003e $http.get(\u0027/someUrl\u0027).success(successCallback);\n $http.post(\u0027/someUrl\u0027, data).success(successCallback);\u003c/pre\u003e\n\u003ch2\u003e $http使用实例\u003c/h2\u003e\n\u003cpre class\u003d\"lang:default decode:true \"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;AngularJs HTTP\u0026lt;/title\u0026gt;\n    \u0026lt;style type\u003d\"text/css\"\u0026gt;\n    table,\n    th,\n    td {\n        border: 1px solid grey;\n        border-collapse: collapse;\n        padding: 5px;\n    }\n    \n    table tr:nth-child(odd) {\n        background-color: #f1f1f1;\n    }\n    \n    table tr:nth-child(even) {\n        background-color: #ffffff;\n    }\n    \u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"myApp\" ng-controller\u003d\"myCtrl\"\u0026gt;\n    \u0026lt;h1\u0026gt;AngularJs Http\u0026lt;/h1\u0026gt;\n    \u0026lt;p\u0026gt;\n        \u0026lt;button ng-click\u003d\"generalGet()\"\u0026gt;General Get\u0026lt;/button\u0026gt;\n        \u0026lt;button ng-click\u003d\"clear()\"\u0026gt;Clear Data\u0026lt;/button\u0026gt;\n        \u0026lt;button ng-click\u003d\"shortcutGet()\"\u0026gt;Shortcut Get\u0026lt;/button\u0026gt;\n    \u0026lt;/p\u0026gt;\n    \u0026lt;table\u0026gt;\n        \u0026lt;tr\u0026gt;\n            \u0026lt;th\u0026gt;index\u0026lt;/th\u0026gt;\n            \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\n            \u0026lt;th\u0026gt;County\u0026lt;/th\u0026gt;\n        \u0026lt;/tr\u0026gt;\n        \u0026lt;tr ng-repeat\u003d\"record in records\"\u0026gt;\n            \u0026lt;td\u0026gt;{{$index}}\u0026lt;/td\u0026gt;\n            \u0026lt;td\u0026gt;{{ record.Name }}\u0026lt;/td\u0026gt;\n            \u0026lt;td\u0026gt;{{ record.Country }}\u0026lt;/td\u0026gt;\n        \u0026lt;/tr\u0026gt;\n    \u0026lt;/table\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    angular.module(\u0027myApp\u0027, []).controller(\u0027myCtrl\u0027, function($scope, $http) {\n        $scope.records \u003d [];\n        $scope.clear \u003d function() {\n            $scope.records \u003d [];\n        }\n        $scope.generalGet \u003d function() {\n            $http({\n                method: \u0027GET\u0027,\n                url: \u0027./data/record.json\u0027\n            }).success(function(data) {\n                console.log(data)\n                $scope.records \u003d data.records;\n            })\n        }\n        $scope.shortcutGet \u003d function() {\n            $http.get(\"./data/record.json\").success(function(response) {\n                $scope.records \u003d response.records;\n            })\n        }\n\n    })\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003cspan style\u003d\"color: #ff0000;\"\u003e\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Http\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_http.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\u003c/span\u003e\n\u003ch2\u003e 单元测试$http\u003c/h2\u003e\n\u003cstrong\u003e$http\u003c/strong\u003e的单元测试是依赖于\u003cstrong\u003e$httpBackend\u003c/strong\u003e完成\n\u003cpre class\u003d\"lang:default decode:true\"\u003e$httpBackend.expectGET(...);\n$http.get(...);\n$httpBackend.flush();\u003c/pre\u003e\n\u003ch2\u003e 设置HTTP头信息\u003c/h2\u003e\n使用\u003cstrong\u003e$http\u003c/strong\u003e时会自动对所有请求的\u003cstrong\u003eHTTP\u003c/strong\u003e添加一定的头信息，可以使用\u003cstrong\u003e\u003cspan class\u003d\"pln\"\u003e$httpProvider\u003c/span\u003e\u003cspan class\u003d\"pun\"\u003e.\u003c/span\u003e\u003cspan class\u003d\"pln\"\u003edefaults\u003c/span\u003e\u003cspan class\u003d\"pun\"\u003e.\u003c/span\u003e\u003cspan class\u003d\"pln\"\u003eheaders\u003c/span\u003e\u003c/strong\u003e配置公共请求的头信息\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003e$httpProvider.defaults.headers.common\u003c/strong\u003e  公共的请求头信息，所有请求有效\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eAccept: application/json, text/plain, * / *\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$httpProvider.defaults.headers.post\u003c/strong\u003e  \u003cstrong\u003ePOST\u003c/strong\u003e请求的头信息设置\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eContent-Type: application/json\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$httpProvider.defaults.headers.put\u003c/strong\u003e  \u003cstrong\u003ePUT\u003c/strong\u003e请求的头信息设置\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eContent-Type: application/json\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\t\u003cli\u003e...\u003c/li\u003e\n\u003c/ul\u003e\n也可以自定义头信息，作用于全局\n\u003ccode\u003e$httpProvider.defaults.headers.get \u003d { \u0027My-Header\u0027 : \u0027value\u0027 }\u003c/code\u003e\n\u003ch2\u003e拦截器Interceptors\u003c/h2\u003e\n基于\u003cstrong\u003e$q API\u003c/strong\u003e\n\n对全局错误处理，验证，或任何类型的同步或异步的请求或响应的预处理和后处理，其作用和\u003cstrong\u003eJAVA EE\u003c/strong\u003e的\u003cstrong\u003eSPRING\u003c/strong\u003e框架的拦截器相似，是非常先进的前端框架思想，非常值得去深入学习\n\n通过\u003cstrong\u003e$provide.factory\u003c/strong\u003e工厂创建拦截器，\u003cstrong\u003e$httpProvider.interceptors\u003c/strong\u003e注册拦截器，这一过程称为注入依赖，其中\u003cstrong\u003e$provide\u003c/strong\u003e是AngularJs注入依赖的核心服务\n\u003ch4\u003e拦截器方法\u003c/h4\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003erequest\u003c/strong\u003e：拦截\u003cstrong\u003eHTTP\u003c/strong\u003e请求对象，配置或创建请求对象并返回\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003erequestError\u003c/strong\u003e：拦截\u003cstrong\u003eHTTP\u003c/strong\u003e请求发生的错误的处理\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eresponse\u003c/strong\u003e：拦截\u003cstrong\u003eHTTP\u003c/strong\u003e响应对象，修改或者创建该响应对象并返回\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eresponseError\u003c/strong\u003e：拦截\u003cstrong\u003eHTTP\u003c/strong\u003e响应发生的错误的处理\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e创建拦截器的两种方式\u003c/h4\u003e\n使用\u003cstrong\u003e$provide.factory\u003c/strong\u003e创建，并使用\u003cstrong\u003e$httpProvider.interceptors\u003c/strong\u003e注册\n\u003cpre class\u003d\"lang:default decode:true \"\u003e// register the interceptor as a service\n  $provide.factory(\u0027myHttpInterceptor\u0027, function($q, dependency1, dependency2) {\n    return {\n      // optional method\n      \u0027request\u0027: function(config) {\n        // do something on success\n        return config;\n      },\n\n      // optional method\n     \u0027requestError\u0027: function(rejection) {\n        // do something on error\n        if (canRecover(rejection)) {\n          return responseOrNewPromise\n        }\n        return $q.reject(rejection);\n      },\n\n      // optional method\n      \u0027response\u0027: function(response) {\n        // do something on success\n        return response;\n      },\n\n      // optional method\n     \u0027responseError\u0027: function(rejection) {\n        // do something on error\n        if (canRecover(rejection)) {\n          return responseOrNewPromise\n        }\n        return $q.reject(rejection);\n      }\n    };\n  });\n\n  $httpProvider.interceptors.push(\u0027myHttpInterceptor\u0027);\u003c/pre\u003e\n直接使用\u003cstrong\u003e$httpProvider.interceptors\u003c/strong\u003e注册，该拦截器为匿名\n\u003cpre class\u003d\"lang:default decode:true\"\u003e// alternatively, register the interceptor via an anonymous factory\n  $httpProvider.interceptors.push(function($q, dependency1, dependency2) {\n    return {\n     \u0027request\u0027: function(config) {\n         // same as above\n      },\n\n      \u0027response\u0027: function(response) {\n         // same as above\n      }\n    };\n  });\u003c/pre\u003e\n\u003ch2\u003e更高层次的访问 \u003cstrong\u003e$resource\u003c/strong\u003e\u003c/h2\u003e\n依赖于\u003cstrong\u003e $http\u003c/strong\u003e，需要ngResource模块\n\n在\u003cstrong\u003eangular.js\u003c/strong\u003e之后引入该模块\u003cstrong\u003eangular-resource.js\u003c/strong\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e \u0026lt;script src\u003d\"angular.js\"\u0026gt;\n \u0026lt;script src\u003d\"angular-resource.js\"\u0026gt;\u003c/pre\u003e\n\u003ch4\u003e使用\n\u003ccode\u003e$resource(url, [paramDefaults], [actions]);\u003c/code\u003e\u003c/h4\u003e\n中括号\u003cstrong\u003e[arguments]\u003c/strong\u003e中参数为可选\n\u003ch4\u003e参数\u003c/h4\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eurl\u003c/strong\u003e—\u003cstrong\u003estring\u003c/strong\u003e—一个参数化模板参数的\u003cstrong\u003eURL\u003c/strong\u003e前缀，如\u003cstrong\u003e/user/:username\u003c/strong\u003e\n\u003cul\u003e\n\t\u003cli\u003e可以是一个带有后缀的\u003cstrong\u003eURL\u003c/strong\u003e，如\u003cstrong\u003e$resource(\u0027http://example.com/resource.json\u0027)\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$resource(\u0027http://example.com/resource/:resource_id.:format\u0027)\u003c/strong\u003e，如果\u003cstrong\u003e:resource_id\u003c/strong\u003e是空的，会导致页面的崩溃，找不到这个\u003cstrong\u003eURL\u003c/strong\u003e，可以使用\u003cstrong\u003e /\\.\u003c/strong\u003e 避免这种情况\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eparamDefaults\u003c/strong\u003e—\u003cstrong\u003eObject\u003c/strong\u003e—\u003cstrong\u003eURL\u003c/strong\u003e参数的默认值\n\u003cul\u003e\n\t\u003cli\u003e参数对象的\u003cstrong\u003eKey\u003c/strong\u003e—\u003cstrong\u003eVaule\u003c/strong\u003e需要先绑定到一个网址模板，都以?添加到\u003cstrong\u003eURL \u003c/strong\u003e之后，如\u003cstrong\u003e/path?key\u003dvalue\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e使用一个模板\u003cstrong\u003eURL\u003c/strong\u003e，动态替换模板URL中的值，如模板路径\u003cstrong\u003e/path/:verb\u003c/strong\u003e和参数\u003cstrong\u003e{verb:\u0027greet\u0027, salutation:\u0027Hello\u0027}\u003c/strong\u003e ，最终\u003cstrong\u003eURL\u003c/strong\u003e为\u003cstrong\u003e/path/greet?salutation\u003dHello\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e如果参数值的前缀是@然后该参数将从对数据对象对应的\u003cstrong\u003ekey\u003c/strong\u003e值（用于非\u003cstrong\u003eGET\u003c/strong\u003e操作）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eaction\u003c/strong\u003e—\u003cstrong\u003eObject\u003c/strong\u003e—自定义操作扩展资源操作的默认设置\n\u003cpre class\u003d\"lang:default decode:true\"\u003e {action1: {method:?, params:?, isArray:?, headers:?, ...},\n   action2: {method:?, params:?, isArray:?, headers:?, ...},\n   ...}\u003c/pre\u003e\n参数\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eaction\u003c/strong\u003e—\u003cstrong\u003estring\u003c/strong\u003e—资源\u003cstrong\u003eURL\u003c/strong\u003e名称\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003emethod\u003c/strong\u003e、\u003cstrong\u003eparams\u003c/strong\u003e、\u003cstrong\u003eurl\u003c/strong\u003e、\u003cstrong\u003eisArray\u003c/strong\u003e等  具体查看本章前面\u003cstrong\u003e$http(config)\u003c/strong\u003e 参数详情\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e\u003cstrong\u003e返回资源实例对象可包含\u003c/strong\u003e\u003c/h4\u003e\n资源对象包含默认方法的操作，如\n\u003cpre class\u003d\"lang:default decode:true\"\u003e { \n    \u0027get\u0027:    {method:\u0027GET\u0027},\n    \u0027save\u0027:   {method:\u0027POST\u0027},\n    \u0027query\u0027:  {method:\u0027GET\u0027, isArray:true},\n    \u0027remove\u0027: {method:\u0027DELETE\u0027},\n    \u0027delete\u0027: {method:\u0027DELETE\u0027}\n };\u003c/pre\u003e\n使用资源类直接调用这些方法会调用\u003cstrong\u003e$http\u003c/strong\u003e中对应的方法，资源类实例对象，使用\u003cstrong\u003e$\u003c/strong\u003e调用默认方法可轻松的完成\u003cstrong\u003eCRUD \u003c/strong\u003e(\u003cstrong\u003ecreate\u003c/strong\u003e, \u003cstrong\u003eread\u003c/strong\u003e, \u003cstrong\u003eupdate\u003c/strong\u003e, \u003cstrong\u003edelete\u003c/strong\u003e) 操作，如\n\u003cpre class\u003d\"lang:default decode:true\"\u003e var User \u003d $resource(\u0027/user/:userId\u0027, {userId:\u0027@id\u0027});\n  var user \u003d User.get({userId:123}, function() {\n    user.abc \u003d true;\n    user.$save();\n  });\u003c/pre\u003e\n使用资源类或者资源类实例对象直接调用\u003cstrong\u003eaction\u003c/strong\u003e方法\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eHTTP\u003c/strong\u003e \u003cstrong\u003eGET\u003c/strong\u003e 请求调用\u003cstrong\u003eactions\u003c/strong\u003e：\u003cstrong\u003eResource.action([parameters], [success], [error])\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e非\u003cstrong\u003eGET\u003c/strong\u003e请求调用\u003cstrong\u003eactions\u003c/strong\u003e：\u003cstrong\u003eResource.action([parameters], postData, [success], [error])\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e非\u003cstrong\u003eGET\u003c/strong\u003e请求的资源实例对象调用\u003cstrong\u003eactions\u003c/strong\u003e：\u003cstrong\u003einstance.$action([parameters], [success], [error])\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e$promise\u003c/strong\u003e：保证你的数据是加载完成的，同时完成视图和数据的渲染\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e\u003cspan class\u003d\"pln\"\u003e$resolved\u003c/span\u003e\u003c/code\u003e\u003c/strong\u003e：\u003cstrong\u003etrue\u003c/strong\u003e 表示在第一次与服务器交互完成之后（无论成功或失败），确定数据和视图之间的绑定是否使用到了资源\u003cstrong\u003eResource\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003e资源使用实例—信用卡管理\u003c/h2\u003e\n这里\u003cstrong\u003eexpect\u003c/strong\u003e方法为单元测试方法\n\u003cpre class\u003d\"lang:default decode:true\"\u003e    // 定义一个 CreditCard class\n    var CreditCard \u003d $resource(\u0027/user/:userId/card/:cardId\u0027, {\n        userId: 123,\n        cardId: \u0027@id\u0027\n    }, {\n        charge: {\n            method: \u0027POST\u0027,\n            params: {\n                charge: true\n            }\n        }\n    });\n\n    // 从服务端查询数据集合\n    var cards \u003d CreditCard.query(function() {\n        // GET: /user/123/card\n        // server returns: [ {id:456, number:\u00271234\u0027, name:\u0027Smith\u0027} ];\n\n        var card \u003d cards[0];\n        // each item is an instance of CreditCard\n        expect(card instanceof CreditCard).toEqual(true);\n        card.name \u003d \"J. Smith\";\n        // 修改第一个的名称 使用默认的方法\n        card.$save();\n        // POST: /user/123/card/456 {id:456, number:\u00271234\u0027, name:\u0027J. Smith\u0027}\n        // server returns: {id:456, number:\u00271234\u0027, name: \u0027J. Smith\u0027};\n\n        // 使用一个自定义方法\n        card.$charge({\n            amount: 9.99\n        });\n        // POST: /user/123/card/456?amount\u003d9.99\u0026amp;charge\u003dtrue {id:456, number:\u00271234\u0027, name:\u0027J. Smith\u0027}\n    });\n\n    //存储一个新的card\n    var newCard \u003d new CreditCard({\n        number: \u00270123\u0027\n    });\n    newCard.name \u003d \"Mike Smith\";\n    newCard.$save();\n    // POST: /user/123/card {number:\u00270123\u0027, name:\u0027Mike Smith\u0027}\n    // server returns: {id:789, number:\u00270123\u0027, name: \u0027Mike Smith\u0027};\n    expect(newCard.id).toEqual(789);\u003c/pre\u003e\n得到并更新一个\u003cstrong\u003eUser\u003c/strong\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003evar User \u003d $resource(\u0027/user/:userId\u0027, {\n        userId: \u0027@id\u0027\n    });\n    User.get({\n        userId: 123\n    }, function(user) {\n        user.abc \u003d true;\n        user.$save();\n    });\u003c/pre\u003e\n使用\u003cstrong\u003e$promise\u003c/strong\u003e确定已返回的数据\n\u003cpre class\u003d\"lang:default decode:true\"\u003e    var User \u003d $resource(\u0027/user/:userId\u0027, {\n        userId: \u0027@id\u0027\n    });\n    User.get({\n            userId: 123\n        })\n        .$promise.then(function(user) {\n            $scope.user \u003d user;\n        });\u003c/pre\u003e\n自定义一个\u003cstrong\u003eaction\u003c/strong\u003e名为\u003cstrong\u003eupdate\u003c/strong\u003e的\u003cstrong\u003ePUT\u003c/strong\u003e请求\n\u003cpre class\u003d\"lang:default decode:true\"\u003e    //定义Angular应用 依赖于模块ngResource，ngRoute\n    var app \u003d angular.module(\u0027app\u0027, [\u0027ngResource\u0027, \u0027ngRoute\u0027]);\n\n    // 创建一个自定义方法update使用PUT请求\n    app.factory(\u0027Notes\u0027, [\u0027$resource\u0027, function($resource) {\n        return $resource(\u0027/notes/:id\u0027, null, {\n            \u0027update\u0027: {\n                method: \u0027PUT\u0027\n            }\n        });\n    }]);\n\n    //控制器依赖$scope, $routeParams, Notes\n    app.controller(\u0027NotesCtrl\u0027, [\u0027$scope\u0027, \u0027$routeParams\u0027, \u0027Notes\u0027,\n        function($scope, $routeParams, Notes) {\n            // 使用默认get方法\n            var note \u003d Notes.get({\n                id: $routeParams.id\n            });\n            $id \u003d note.id;\n\n            // 使用自定义update方法\n            Notes.update({\n                id: $id\n            }, note);\n\n        }\n    ]);\u003c/pre\u003e",
    "title": "AngularJs Http、Resource",
    "post_tag": "AngularJs",
    "post_date": "2015-09-13 04:27:06"
}, {
    "content": "\u003cstrong\u003eAngularJs\u003c/strong\u003e 通过事件指令给 \u003cstrong\u003eHTML \u003c/strong\u003e元素添加相应事件，例如前面已经使用过的 \u003cstrong\u003eng-click \u003c/strong\u003e指令为元素添加一个可点击的事件\n\u003ch2\u003eAngularJs 事件指令\u003c/h2\u003e\n\u003cstrong\u003eAngularJs\u003c/strong\u003e 中事件丰富，满足开发中使用到的事件类型，通过事件指令显得更加灵活方便，也有对移动设备触摸事件\u003cstrong\u003eng-swipe-left\u003c/strong\u003e、\u003cstrong\u003eng-swipe-right \u003c/strong\u003e的扩展等，这些都是对开发者很有帮助的功能\n\u003ctable class\u003d\"table table-striped \"\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e详情\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-click\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e元素点击事件\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-dblclick\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e允许给元素指定一个双击事件\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-change\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e元素值发生改变的事件，和 JavaScript 的 onChange 事件不同，ng-change 也可以是一个表达式改变而触发\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-focus\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e元素获得焦点的事件\u003c/code\u003e\n\u003ccode\u003e\u003ccode\u003e\u0026lt;window, input, select, textarea, a ng-focus\u003d\"\"\u0026gt;\n...\u003c/code\u003e\u003c/code\u003e\u0026nbsp;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-blur\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e元素失去焦点的事件\u003c/code\u003e\n\u003ccode\u003e\u003ccode\u003e\u0026lt;window, input, select, textarea, a ng-focus\u003d\"\"\u0026gt;\n...\u003c/code\u003e\u003c/code\u003e\u0026nbsp;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-submit\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e提交 Form 表单时的事件\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-keydown\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e按键按下时的事件\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-keypress\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e键盘按下并释放（松开）时的事件\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-keyup\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e按键松开时的事件\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-mousedown\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e鼠标按下时发生\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-mouseup\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e鼠标松开时发生\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-mouseenter\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e鼠标进入元素区域内发生\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-mouseleave\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e鼠标离开元素区域内发生\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-mouseover\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e鼠标在元素区域内发生\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-mousemove\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e鼠标在元素区域上移动时发生\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e...\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n这三个事件是很有趣的\n\u003col\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-copy \u003c/strong\u003e用户发生复制行为（\u003cstrong\u003ectrl + c\u003c/strong\u003e）的事件，可以是一个表达式\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-paste \u003c/strong\u003e用户方式粘贴行为（\u003cstrong\u003ectrl + v\u003c/strong\u003e）的事件，可以是一个表达式\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-cut \u003c/strong\u003e用户发生剪切行为（\u003cstrong\u003ectrl + x\u003c/strong\u003e）的事件，可以是一个表达式\u003c/li\u003e\n\u003c/ol\u003e\n\u003c!--more--\u003e\n\u003ch2\u003e AngularJs 事件实例\u003c/h2\u003e\n\u003cpre class\u003d\"lang:default decode:true \"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;AngularJs Event\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"eventApp\" ng-controller\u003d\"eventCtrl\"\u0026gt;\n    \u0026lt;div\u0026gt;\n        \u0026lt;h2\u0026gt;ng-click、ng-dblclick\u0026lt;/h2\u0026gt;\n        \u0026lt;button ng-click\u003d\"clickState\u003d\u0027click\u0027\"\u0026gt;Click\u0026lt;/button\u0026gt;\n        \u0026lt;button  ng-dblclick\u003d\"clickState\u003d\u0027dblclick\u0027\"\u0026gt;dblClick\u0026lt;/button\u0026gt;\n        \u0026lt;span\u0026gt;{{clickState}}\u0026lt;/span\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;div\u0026gt;\n    \t\u0026lt;h2\u0026gt;ng-change、ng-focus、ng-blur、ng-submit\u0026lt;/h2\u0026gt;\n    \t\u0026lt;form ng-submit\u003d\"formSubmit()\"\u0026gt;\n    \t\tName :　\u0026lt;input name\u003d\"userName\" ng-model\u003d\"userName\" ng-focus\u003d\"userNameState\u003d\u0027input focus\u0027\" ng-blur\u003d\"userNameState\u003d\u0027input blur\u0027\"\u0026gt;\u0026lt;span\u0026gt;{{userNameState}}\u0026lt;/span\u0026gt;\n    \t\t\u0026lt;p\u0026gt;\u0026lt;input type\u003d\"submit\" value\u003d\"Submit\"\u0026gt;\u0026lt;/p\u0026gt;\n    \t\t\u0026lt;p\u0026gt;formValue \u003d {{formValue}}\u0026lt;/p\u0026gt;\n    \t\u0026lt;/form\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;div\u0026gt;\n        \u0026lt;h2\u0026gt;ng-keydown、ng-keypress、ng-keyup\u0026lt;/h2\u0026gt;\n        \u0026lt;input  ng-keydown\u003d\"keyState\u003d\u0027keydown\u0027\" ng-keypress\u003d\"keyState\u003d\u0027keypress\u0027\" ng-keyup\u003d\"keyState\u003d\u0027keyup\u0027\"\u0026gt;\n        {{keyState}}\n    \u0026lt;/div\u0026gt;\n    \u0026lt;div\u0026gt;\n        \u0026lt;h2\u0026gt;ng-mousedown、ng-mouseup\u0026lt;/h2\u0026gt;\n        \u0026lt;div\u0026gt;\n        \t\u0026lt;p ng-non-bindable\u0026gt;ng-mousedown\u003d\"ducount \u003d ducount + 1\" ng-mouseup\u003d\"ducount \u003d ducount - 1\"\u0026lt;/p\u0026gt;\n        \t\u0026lt;button ng-mousedown\u003d\"ducount \u003d ducount + 1\" ng-mouseup\u003d\"ducount \u003d ducount - 1\" \u0026gt;\n\t\t\t  mouse down/up\n\t\t\t\u0026lt;/button\u0026gt;\n\t\t\tducount: {{ducount}}\n        \u0026lt;/div\u0026gt;\n        \u0026lt;h2\u0026gt;ng-mouseenter、ng-mouseleave\u0026lt;/h2\u0026gt;\n        \u0026lt;div\u0026gt;\n        \t\u0026lt;p ng-non-bindable\u0026gt;ng-mouseenter\u003d\"elcount \u003d elcount + 1\" ng-mouseleave\u003d\"elcount \u003d elcount - 1\"\u0026lt;/p\u0026gt;\n        \t\u0026lt;button ng-mouseenter\u003d\"elcount \u003d elcount + 1\" ng-mouseleave\u003d\"elcount \u003d elcount - 1\" \u0026gt;\n\t\t\t  mouse enter/leave\n\t\t\t\u0026lt;/button\u0026gt;\n\t\t\telcount: {{elcount}}\n        \u0026lt;/div\u0026gt;\n        \u0026lt;h2\u0026gt;ng-mouseover\u0026lt;/h2\u0026gt;\n\t\t\u0026lt;div\u0026gt;\n\t\t\t\u0026lt;p ng-non-bindable\u0026gt;ng-mouseover\u003d\"mocount \u003d mocount + 1\"\u0026lt;/p\u0026gt;\n\t\t\t\u0026lt;button ng-mouseover\u003d\"mocount \u003d mocount + 1\"\u0026gt;mouse over\u0026lt;/button\u0026gt;\n\t\t\tmocount: {{mocount}}\n\t\t\u0026lt;/div\u0026gt;\n        \u0026lt;h2\u0026gt;ng-mousemove\u0026lt;/h2\u0026gt;\n        \u0026lt;div\u0026gt;\n        \t\u0026lt;p ng-non-bindable\u0026gt;ng-mousemove\u003d\"mvcount \u003d mvcount + 1\"\u0026lt;/p\u0026gt;\n        \t\u0026lt;button ng-mousemove\u003d\"mvcount \u003d mvcount + 1\"\u0026gt;mouse move\u0026lt;/button\u0026gt;\n\t\t\tmvcount: {{mvcount}}\n        \u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;div\u0026gt;\n        \u0026lt;h2\u0026gt;ng-copy、ng-paste、ng-cut\u0026lt;/h2\u0026gt;\n        \u0026lt;input type\u003d\"text\" value\u003d\"try copy/cut/paste\" ng-copy\u003d\"mecpCtPaState \u003d \u0027copy\u0027\" ng-paste\u003d\"mecpCtPaState \u003d \u0027paste\u0027\"  ng-cut\u003d\"mecpCtPaState \u003d \u0027cut\u0027\"\u0026gt;\n        \u0026lt;span\u0026gt;{{mecpCtPaState}}\u0026lt;/span\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    angular.module(\u0027eventApp\u0027, []).controller(\u0027eventCtrl\u0027, function($scope) {\n    \t$scope.clickState \u003d \"\";\n    \t$scope.formValue \u003d {};\n    \t$scope.userName \u003d \"\";\n    \t$scope.userNameState \u003d \"\"\n    \t$scope.formSubmit \u003d function () {\n    \t\t$scope.formValue[\u0027userName\u0027] \u003d $scope.userName;\n    \t\t$scope.userName \u003d \"\";\n    \t}\n    \t$scope.keyState \u003d \u0027\u0027;\n    \t$scope.cpCtPaState \u003d \u0027\u0027;\n    \t$scope.ducount \u003d $scope.elcount  \u003d $scope.mocount \u003d $scope.mvcount \u003d  0;\n    });\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003cspan style\u003d\"color: #ff0000;\"\u003e \u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Event\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_event.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\u003c/span\u003e",
    "title": "AngularJs 事件",
    "post_tag": "AngularJs",
    "post_date": "2015-09-10 04:13:10"
}, {
    "content": "表单的验证是AngularJs中重要的一个模块，表单验证的实时性更是AngularJs的亮点\n\u003ch4\u003e支持表单元素的类型\u003c/h4\u003e\n\u003col\u003e\n\t\u003cli class\u003d\"api-profile-header-heading\"\u003e\u003cstrong\u003einput\u003c/strong\u003e 普通输入框\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003einput[text]\u003c/strong\u003e 文本输入框\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003einput[number]\u003c/strong\u003e 格式为数字的文本输入框\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003einput[email]\u003c/strong\u003e 格式为邮件的文类输入框\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003einput[url]\u003c/strong\u003e 格式为链接的文本输入框\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003einput[checkbox]\u003c/strong\u003e 多选框\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003einput[radio]\u003c/strong\u003e 单选框\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003etextarea\u003c/strong\u003e 多行文本框\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eselect\u003c/strong\u003e 下拉框\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eAngularJs ng-*属性直接作用于表单元素上\u003c/h2\u003e\n作用于元素上\n\u003cpre class\u003d\"lang:default decode:true  \"\u003e\u0026lt;input\n  type\u003d\"text\"\n  ng-model\u003d\"\"\n  [name\u003d\"\"]\n  [required\u003d\"\"]\n  [ng-required\u003d\"\"]\n  [ng-minlength\u003d\"\"]\n  [ng-maxlength\u003d\"\"]\n  [ng-pattern\u003d\"\"]\n  [ng-trim\u003d\"\"]\n  [ng-change\u003d\"\"]\n\u0026gt;\n\u0026lt;input type\u003d\"number\"\n  ng-model\u003d\"\"\n  [name\u003d\"\"]\n  [min\u003d\"\"]\n  [max\u003d\"\"]\n  [required\u003d\"\"]\n  [ng-required\u003d\"\"]\n  [ng-minlength\u003d\"\"]\n  [ng-maxlength\u003d\"\"]\n  [ng-pattern\u003d\"\"]\n  [ng-change\u003d\"\"]\n\u0026gt;\n...\u003c/pre\u003e\n\u003cstrong\u003e[ ] \u003c/strong\u003e中的参数为可选项\n\u003ch2\u003e文本标签上ng-*属性的参数说明\u003c/h2\u003e\n\u003c!--more--\u003e\n\u003ctable class\u003d\"table table-striped \"\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e详情\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-model\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e数据绑定，Model-View\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e元素的属性名name，HTML属性\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003erequired\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e设置该元素为必须要验证的类型，HTML属性\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-required\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e为true时，该元素为必须验证类型\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-minlength\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enumber\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e最小长度验证\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-maxlength\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enumber\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e最大长度验证\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-pattern\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e匹配一个正则表达式\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-trim\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e去除多余的空格\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-change\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e元素值发生改变的���件\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e...\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003einput[checkbox/radio] 标签\u003c/h2\u003e\n作用于元素上\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;input type\u003d\"checkbox\"\n       ng-model\u003d\"\"\n       [name\u003d\"\"]\n       [ng-true-value\u003d\"\"]\n       [ng-false-value\u003d\"\"]\n       [ng-change\u003d\"\"]\u0026gt;\n\u0026lt;input type\u003d\"radio\"\n       ng-model\u003d\"\"\n       value\u003d\"\"\n       [name\u003d\"\"]\n       [ng-change\u003d\"\"]\n       ng-value\u003d\"\"\u0026gt;\u003c/pre\u003e\n参数说明\n\u003ctable class\u003d\"table table-striped \"\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e详情\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-true-value\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e选中时，元素的值\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-false-value\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e未选中时，元素的值\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-value\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e选中时，元素的值\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eAngularJs 表单验证\u003c/h2\u003e\nAngulaJs表单验证内置了五种相关验证相对应提示的对象属性\n\u003ctable class\u003d\"table table-striped \"\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e属性\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$pristine\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 表示用户没有对表单元素产生交互，如修改\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$dirty\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 表示用户产生了交互，与$pristine相反\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$valid\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 表示元素本身或Form表单通过验证\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$invalid\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 表示元素本身或Form表单未通过验证，与$valid相反\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$error\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eobject\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e一个 Key-Value 的哈希对象，包含元素或者Form表单invalid未通过验证的信息\u003c/code\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eKeys\u003c/strong\u003e 所有验证类型的令牌（\u003cstrong\u003eTokens）\u003c/strong\u003e， 即错误的名称\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eValue\u003c/strong\u003e 验证类型为（\u003cstrong\u003einvalid\u003c/strong\u003e）的错误信息，包含元素或者\u003cstrong\u003eForm\u003c/strong\u003e表单。当为\u003cstrong\u003eForm\u003c/strong\u003e表单时，\u003cstrong\u003eValue\u003c/strong\u003e是一个数组\u003c/li\u003e\n\u003c/ul\u003e\n内置验证令牌（\u003cstrong\u003eTokens）\u003c/strong\u003e种类\n\n\u003cstrong\u003eemail\u003c/strong\u003e，\u003cstrong\u003emax\u003c/strong\u003e，\u003cstrong\u003emaxlength\u003c/strong\u003e，\u003cstrong\u003emin\u003c/strong\u003e，\u003cstrong\u003eminlength\u003c/strong\u003e，\u003cstrong\u003enumber\u003c/strong\u003e，\u003cstrong\u003epattern\u003c/strong\u003e，\u003cstrong\u003erequired\u003c/strong\u003e，\u003cstrong\u003eurl\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003e 文本标签验证实例\u003c/h2\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;Angularjs Form Input\u0026lt;/title\u0026gt;\n    \u0026lt;style type\u003d\"text/css\"\u0026gt;\n    .form-state {\n        position: fixed;\n        right: 50px;\n        top: 10%;\n        min-height: 300px;\n        padding: 0 20px;\n        border: 1px solid #ddd;\n        max-width: 400px;\n        background: #f7f7f7;\n    }\n    \n    .form-child-state {\n        position: absolute;\n        right: 450px;\n        top: 0%;\n        min-height: 580px;\n        padding: 0 20px;\n        border: 1px solid #ddd;\n        max-width: 400px;\n        background: #f7f7f7;\n    }\n    \n    .my-form {\n        position: fixed;\n        padding: 20px 30px;\n    }\n    \n    .error {\n        color: #f00;\n    }\n    \n    label {\n        vertical-align: top;\n    }\n    \n    mark {\n        font-size: 14px;\n        color: #555;\n        background: #f5f5f5;\n        margin-left: 20px;\n    }\n    \u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"formApp\" ng-controller\u003d\"formCtrl\"\u0026gt;\n    \u0026lt;form name\u003d\"myForm\" class\u003d\"my-form\"\u0026gt;\n        \u0026lt;p\u0026gt;Form Name \u003d myForm\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;user \u003d {{user}}\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt; User Name:\n            \u0026lt;Input type\u003d\"text\" name\u003d\"userName\" ng-model\u003d\"user.userName\" required\u0026gt;\n            \u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.userName.$error.required\"\u0026gt;Required!\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;Age：\n            \u0026lt;Input type\u003d\"number\" name\u003d\"age\" min\u003d\"1\" max\u003d\"99\" ng-model\u003d\"user.age\" required\u0026gt;\n            \u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.age.$error.required\"\u0026gt;Required!\u0026lt;/span\u0026gt;\n            \u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.age.$error.min||myForm.age.$error.max\"\u0026gt;Age Between 0 And 99!\u0026lt;/span\u0026gt;\n            \u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.age.$error.number\"\u0026gt;Not A Number!\u0026lt;/span\u0026gt;\n            \u0026lt;br\u0026gt;\n            \u0026lt;mark\u0026gt;1-99\u0026lt;/mark\u0026gt;\n        \u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;Email：\n            \u0026lt;Input type\u003d\"email\" name\u003d\"email\" ng-model\u003d\"user.email\" required\u0026gt;\n            \u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.email.$error.required\"\u0026gt;Required!\u0026lt;/span\u0026gt;\n            \u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.email.$error.email\"\u0026gt;Not Email!\u0026lt;/span\u0026gt;\n        \u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;Url：\n            \u0026lt;Input type\u003d\"url\" name\u003d\"url\" ng-model\u003d\"user.url\" required\u0026gt;\n            \u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.url.$error.required\"\u0026gt;Required!\u0026lt;/span\u0026gt;\n            \u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.url.$error.url\"\u0026gt;Not Url!\u0026lt;/span\u0026gt;\n        \u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;Sex：\n            \u0026lt;Input type\u003d\"radio\" name\u003d\"sex\" ng-model\u003d\"user.sex\" value\u003d\"1\"\u0026gt;Male\n            \u0026lt;Input type\u003d\"radio\" name\u003d\"sex\" ng-model\u003d\"user.sex\" value\u003d\"0\"\u0026gt;Female\n        \u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;\n            \u0026lt;label\u0026gt;Remark：\u0026lt;/label\u0026gt;\n            \u0026lt;textarea ng-model\u003d\"user.remark\" name\u003d\"remark\" ng-maxLength\u003d\"50\" rows\u003d\"6\" cols\u003d\"40\"\u0026gt;\u0026lt;/textarea\u0026gt;\n            \u0026lt;br/\u0026gt;\u0026lt;span class\u003d\"error\" ng-show\u003d\"myForm.remark.$error.maxlength\"\u0026gt;Exceed Maximum Length！\u0026lt;/span\u0026gt;\n            \u0026lt;br/\u0026gt;\n            \u0026lt;mark\u0026gt;Maximum Length 50\u0026lt;/mark\u0026gt;\n        \u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;\n            \u0026lt;button type\u003d\"submit\" ng-disabled\u003d\"myForm.$invalid\"\u0026gt;Submit Form\u0026lt;/button\u0026gt;\n            \u0026lt;button type\u003d\"button\" ng-click\u003d\"reset()\"\u0026gt;Reset Form\u0026lt;/button\u0026gt;\n            \u0026lt;button type\u003d\"button\" ng-click\u003d\"load()\"\u0026gt;Load Form Data\u0026lt;/button\u0026gt;\n        \u0026lt;/p\u0026gt;\n    \u0026lt;/form\u0026gt;\n    \u0026lt;div class\u003d\"form-child-state\"\u0026gt;\n        \u0026lt;h4\u0026gt;Form Child State\u0026lt;/h4\u0026gt;\n        \u0026lt;ul\u0026gt;\n            \u0026lt;li\u0026gt;\n                User Name\n                \u0026lt;ul\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.userName.$pristine \u003d {{myForm.userName.$pristine}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.userName.$dirty \u003d {{myForm.userName.$dirty}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.userName.$valid \u003d {{myForm.userName.$valid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.userName.$invalid \u003d {{myForm.userName.$invalid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.userName.$error \u003d {{myForm.userName.$error}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                Age\n                \u0026lt;ul\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.age.$pristine \u003d {{myForm.age.$pristine}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.age.$dirty \u003d {{myForm.age.$dirty}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.age.$valid \u003d {{myForm.age.$valid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.age.$invalid \u003d {{myForm.age.$invalid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.age.$error \u003d {{myForm.age.$error}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                Email\n                \u0026lt;ul\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.email.$pristine \u003d {{myForm.email.$pristine}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.email.$dirty \u003d {{myForm.email.$dirty}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.email.$valid \u003d {{myForm.email.$valid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.email.$invalid \u003d {{myForm.email.$invalid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.email.$error \u003d {{myForm.email.$error}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                url\n                \u0026lt;ul\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.url.$pristine \u003d {{myForm.url.$pristine}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.url.$dirty \u003d {{myForm.url.$dirty}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.url.$valid \u003d {{myForm.url.$valid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.url.$invalid \u003d {{myForm.url.$invalid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.url.$error \u003d {{myForm.url.$error}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                Sex\n                \u0026lt;p\u0026gt;{{user.sex}}\u0026lt;/p\u0026gt;\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                Remark\n                \u0026lt;ul\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.remark.$pristine \u003d {{myForm.remark.$pristine}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.remark.$dirty \u003d {{myForm.remark.$dirty}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.remark.$valid \u003d {{myForm.remark.$valid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.remark.$invalid \u003d {{myForm.remark.$invalid}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                    \u0026lt;li\u0026gt;\u0026lt;small\u0026gt;myForm.remark.$error \u003d {{myForm.remark.$error}}\u0026lt;/small\u0026gt;\u0026lt;/li\u0026gt;\n                \u0026lt;/ul\u0026gt;\n            \u0026lt;/li\u0026gt;\n        \u0026lt;/ul\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;div class\u003d\"form-state\"\u0026gt;\n        \u0026lt;h4\u0026gt;Form State\u0026lt;/h4\u0026gt;\n        \u0026lt;ul\u0026gt;\n            \u0026lt;li\u0026gt;\n                myForm.$pristine \u003d {{myForm.$pristine}}\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                myForm.dirty \u003d {{myForm.$dirty}}\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                myForm.valid \u003d {{myForm.$valid}}\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                myForm.$invalid \u003d {{myForm.$invalid}}\n            \u0026lt;/li\u0026gt;\n            \u0026lt;li\u0026gt;\n                myForm.$error \u003d \u0026lt;pre\u0026gt;{{myForm.$error}}\u0026lt;/pre\u0026gt;\n            \u0026lt;/li\u0026gt;\n        \u0026lt;/ul\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    angular.module(\u0027formApp\u0027, []).controller(\u0027formCtrl\u0027, function($scope) {\n        $scope.user \u003d {\n            userName: \u0027\u0027,\n            age: 0,\n            email: \u0027\u0027,\n            url: \u0027\u0027,\n            sex: 1,\n            remark: \u0027\u0027\n        };\n        $scope.load \u003d function() {\n            $scope.user \u003d {\n                userName: \u0027guest\u0027,\n                age: 22,\n                email: \u0027guocoder@gmail.com\u0027,\n                url: \u0027http://www.guocb.com/\u0027,\n                sex: 1,\n                remark: \u0027I Like Code!\u0027\n            };\n        }\n        $scope.reset \u003d function() {\n            $scope.user \u003d {\n            userName: \u0027\u0027,\n            age: 0,\n            email: \u0027\u0027,\n            url: \u0027\u0027,\n            sex: 1,\n            remark: \u0027\u0027\n        };\n        }\n    });\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003ca title\u003d\"AngularJs Form Input\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_form_input.html\" target\u003d\"_blank\"\u003e\u003cspan style\u003d\"color: #ff0000;\"\u003e 查看DEMO\u003c/span\u003e\u003c/a\u003e\n\u003ch2\u003eselect 下拉框\u003c/h2\u003e\n\u003cstrong\u003eSELECT \u003c/strong\u003e下拉框数据绑定与文本框有所不同，\u003cstrong\u003eSELECT \u003c/strong\u003e下拉框的数据源更加丰富\n\u003ch4\u003e在HTML元素中\u003c/h4\u003e\n\u003cpre class\u003d\"lang:default decode:true \"\u003e\u0026lt;select\n  ng-model\u003d\"\"\n  [name\u003d\"\"]\n  [required\u003d\"\"]\n  [ng-required\u003d\"\"]\n  [ng-options\u003d\"\"]\u0026gt;\n...\n\u0026lt;/select\u0026gt;\u003c/pre\u003e\n\u003ch4\u003eng-options 参数说明\u003c/h4\u003e\n\u003ctable class\u003d\"table table-striped \"\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e属性\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eng-options\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eexpression\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e选择下面任意一种作为表达式\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003eArray\u003c/strong\u003e 数组为数据源\n\u003cul\u003e\n\t\u003cli\u003e绑定数组每一项的值，label for value in array\u003c/li\u003e\n\t\u003cli\u003e选择指定数组中的项绑定，select as label for value in array\u003c/li\u003e\n\t\u003cli\u003e对数组中值的分组绑定，label group by group for value in array\u003c/li\u003e\n\t\u003cli\u003e选择分组后的数据项绑定，select as label group by group for value in array track by trackexpr\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eObject\u003c/strong\u003e 对象（\u003cstrong\u003eKey-Vaule\u003c/strong\u003e）为数据源\n\u003cul\u003e\n\t\u003cli\u003e绑定对象中（\u003cstrong\u003ekey，value\u003c/strong\u003e）对应的项，\u003cstrong\u003elabel for (key , value) in object\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e选择对象中指定 \u003cstrong\u003ekey \u003c/strong\u003e所对应的值\u003cstrong\u003evalue\u003c/strong\u003e，\u003cstrong\u003eselect as label for (key , value) in object\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e对象中（\u003cstrong\u003ekey\u003c/strong\u003e，\u003cstrong\u003evalue\u003c/strong\u003e）分组绑定，\u003cstrong\u003elabel group by group for (key, value) in object\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e选择分组后的对象中指定\u003cstrong\u003ekey\u003c/strong\u003e对应的值\u003cstrong\u003evalue\u003c/strong\u003e，\u003cstrong\u003eselect as label group by group for (key, value) in object\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n说明 \u003cstrong\u003eselect as label group by group for (key, value) in object\u003c/strong\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003earray / object\u003c/code\u003e：遍历数组或者对象\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003evalue\u003c/code\u003e：局部变量，在迭代过程中，将引用数组中的每个项目或对象的每个属性值\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ekey\u003c/code\u003e：局部变量，在迭代过程中会引用对象的属性名称\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003elabel\u003c/code\u003e：作用于 \u003cstrong\u003eoption \u003c/strong\u003e标签上显示的文本\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eselect\u003c/code\u003e：可以绑定到父 \u003cstrong\u003eselect \u003c/strong\u003e模型，级联使用\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003egroup\u003c/code\u003e：将数据分组并作用于 \u003cstrong\u003eoptgroup \u003c/strong\u003e标签上\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003etrackexpr\u003c/code\u003e：很少使用\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eSELECT 实例\u003c/h2\u003e\n\u003cpre class\u003d\"lang:default decode:true \"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;Angularjs Form Select\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"selectApp\" ng-controller\u003d\"selectCtrl\"\u0026gt;\n\u0026lt;pre\u0026gt;colors \u003d {{colors}}\u0026lt;/pre\u0026gt;\n\u0026lt;ul\u0026gt;\n    \u0026lt;li ng-repeat\u003d\"color in colors\"\u0026gt;\n        Name:\n        \u0026lt;input ng-model\u003d\"color.name\"\u0026gt; [\n        \u0026lt;a href ng-click\u003d\"colors.splice($index, 1)\"\u0026gt;X\u0026lt;/a\u0026gt;]\n    \u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\n        [\u0026lt;a href ng-click\u003d\"colors.push({})\"\u0026gt;add\u0026lt;/a\u0026gt;]\n    \u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\u0026lt;hr/\u0026gt; 没有空项的SELECT：\n\u0026lt;select ng-model\u003d\"myColor\" ng-options\u003d\"color.name for color in colors\"\u0026gt;\u0026lt;/select\u0026gt;\n\u0026lt;br\u0026gt; 第一个为空项的SELECT：\n\u0026lt;select ng-model\u003d\"myColor\" ng-options\u003d\"color.name for color in colors\"\u0026gt;\n    \u0026lt;option value\u003d\"\"\u0026gt;-- choose color --\u0026lt;/option\u0026gt;\n\u0026lt;/select\u0026gt;\n\u0026lt;br\u0026gt; 分组的SELECT：\n\u0026lt;select ng-model\u003d\"myColor\" ng-options\u003d\"color.name group by color.shade for color in colors\"\u0026gt;\u0026lt;/select\u0026gt;\n\u0026lt;hr/\u0026gt;\n\u0026lt;div style\u003d\"border:solid 1px black; height:20px\" ng-style\u003d\"{\u0027background-color\u0027:myColor.name}\"\u0026gt;\u0026lt;/div\u0026gt;\n\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\"\u0026gt;\nangular.module(\u0027selectApp\u0027, []).controller(\u0027selectCtrl\u0027, function($scope) {\n\t $scope.colors \u003d [\n\t    {name:\u0027black\u0027, shade:\u0027dark\u0027},\n\t    {name:\u0027white\u0027, shade:\u0027light\u0027},\n\t    {name:\u0027red\u0027, shade:\u0027dark\u0027},\n\t    {name:\u0027blue\u0027, shade:\u0027dark\u0027},\n\t    {name:\u0027yellow\u0027, shade:\u0027light\u0027}\n\t  ];\n\t\t$scope.myColor \u003d $scope.colors[2];\n})\n\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\u003c/pre\u003e\n\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Form Select\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_form_select.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\n\u003cblockquote\u003e以\u003cstrong\u003ecolors\u003c/strong\u003e数据为例\n\n\u003cstrong\u003eng-options\u003d\"select as label group by group for (key, value) in object\"\u003c/strong\u003e\n\n对应 \u003cstrong\u003eng-options\u003d\"color.name group by color.shade for color in colors\"\u003c/strong\u003e\n\n\u003cspan style\u003d\"color: #333300;\"\u003e迭代 \u003cstrong\u003ecolors \u003c/strong\u003e集合，\u003cstrong\u003ecolor \u003c/strong\u003e为每次迭代的局部变量指向当前迭代元素，以 \u003cstrong\u003ecolor.shade \u003c/strong\u003e分组，\u003cstrong\u003ecolor.name \u003c/strong\u003e作为标签 \u003cstrong\u003eoption \u003c/strong\u003e的文本\u003c/span\u003e\u003c/blockquote\u003e",
    "title": "AngularJs 表单验证",
    "post_tag": "AngularJs",
    "post_date": "2015-09-08 03:34:33"
}, {
    "content": "AngularJs 过滤器通过管道字符(\u003cstrong\u003e|\u003c/strong\u003e)作用于表达式和指令，是\u003cstrong\u003e AngularJs \u003c/strong\u003e服务之一，在 \u003cstrong\u003eJavaScript \u003c/strong\u003e中通过AngularJs内置对象\u003cstrong\u003e $filter \u003c/strong\u003e调用相应方法，用于将显示给用户的格式化数据的筛选器，前面已经使用过的大小写都属于过滤器的一种\n\u003ch2\u003eAngularJs 过滤器\u003c/h2\u003e\nAngularJs过滤器的种类丰富，有大小写转换，数字格式化，货比格式化，时间格式化，json格式化，数据筛选、过滤、排序等，是一个很重要也是非常强大的功能\n\u003ch2\u003e大小写转换\u003c/h2\u003e\n用于转换字符串味大小写\n\u003ch4\u003e在AngularJS表达式中\u003c/h4\u003e\n\u003ccode\u003e{{ lowercase_expression | lowercase}}\u003c/code\u003e\n\u003ccode\u003e{{ lowercase_expression | uppercase}}\u003c/code\u003e\n\u003ch4\u003e在JavaScript\u003c/h4\u003e\n\u003ccode\u003e$filter(\u0027lowercase\u0027)()\u003c/code\u003e\n\u003ccode\u003e$filter(\u0027uppercase\u0027)()\u003c/code\u003e\n\u003ch2\u003e格式化数字 number\u003c/h2\u003e\n\u003c!--more--\u003e\n\n如果输入的不是一个数字，返回一个空的字符串\n\u003ch4\u003e在AngularJS表达式中\u003c/h4\u003e\n\u003ccode\u003e{{ number_expression | number : fractionSize}}\u003c/code\u003e\n\u003ch4\u003e在JavaScript\u003c/h4\u003e\n\u003ccode\u003e$filter(\u0027number\u0027)(number, fractionSize)\u003c/code\u003e\n\u003ch4\u003eJavaScript中的参数说明\u003c/h4\u003e\n\u003ccode\u003efractionSize : 已几位数字分割，默认是3位用逗号分隔\u003c/code\u003e\n\u003ch2\u003e货比格式化 currency\u003c/h2\u003e\n格式化数字为一种货币格式，默认使用当前区域的货比默认符号\n\u003ch4\u003e在AngularJS表达式中\u003c/h4\u003e\n\u003ccode\u003e{{ currency_expression | currency : symbol}}\u003c/code\u003e\n\u003ch4\u003e在JavaScript\u003c/h4\u003e\n\u003ccode\u003e$filter(\u0027currency\u0027)(amount, symbol)\u003c/code\u003e\n\u003ch4\u003eJavaScript中的参数说明\u003c/h4\u003e\n\u003ccode\u003eamount : 输入数字类型的金额 symbol : 要显示货币的符号\u003c/code\u003e\n\u003ch2\u003e格式化JSON对象 json\u003c/h2\u003e\n格式化JavaScript中json对象为json的字符串\n\u003ch4\u003e在AngularJS表达式中\u003c/h4\u003e\n\u003ccode\u003e{{ json_expression | json}}\u003c/code\u003e\n\u003ch4\u003e在JavaScript\u003c/h4\u003e\n\u003ccode\u003e$filter(\u0027json\u0027)(object)\u003c/code\u003e\nobject是一个json格式的对象如\n\u003ccode\u003e{\u0027name\u0027:\u0027ZhangSan\u0027,\u0027age\u0027:20}\u003c/code\u003e\n\u003ch2\u003e数据转换实例\u003c/h2\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"zh\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;Angularjs Filter\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"myApp\" ng-controller\u003d\"myCtrl\"\u0026gt;\n    \u0026lt;h2\u0026gt;大小写转换\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;姓名：\n        \u0026lt;input ng-model\u003d\"yourName\"\u0026gt;\n    \u0026lt;/p\u0026gt;\n    \u0026lt;p\u0026gt;大写：{{yourName | uppercase}}\u0026lt;/p\u0026gt;\n    \u0026lt;p\u0026gt;小写：{{yourName | lowercase}}\u0026lt;/p\u0026gt;\n    \u0026lt;h2\u0026gt;格式化数字 number\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;请输入数字：\n        \u0026lt;input ng-model\u003d\"anumber\"\u0026gt;\n    \u0026lt;/p\u0026gt;\n    \u0026lt;p\u0026gt;\u0026lt;span\u0026gt;{{anumber | number}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;h2\u0026gt;货币格式 currency\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;单价：\n        \u0026lt;input type\u003d\"number\" ng-model\u003d\"price\"\u0026gt;\n    \u0026lt;/p\u0026gt;\n    \u0026lt;p\u0026gt;数量：\n        \u0026lt;input type\u003d\"number\" ng-model\u003d\"numb\"\u0026gt;\n    \u0026lt;/p\u0026gt;\n    \u0026lt;p\u0026gt;总价：{{numb * price | currency : \u0027￥\u0027}}\u0026lt;/p\u0026gt;\n    \u0026lt;h2\u0026gt;时间DATE格式化 date\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;\u0026lt;span ng-non-bindable\u0026gt;{{1288323623006 | date:\u0027medium\u0027}}\u0026lt;/span\u0026gt;:\n        \u0026lt;span\u0026gt;{{strDate | date:\u0027medium\u0027}}\u0026lt;/span\u0026gt;\n        \u0026lt;br\u0026gt;\n        \u0026lt;span ng-non-bindable\u0026gt;{{1288323623006 | date:\u0027yyyy-MM-dd HH:mm:ss Z\u0027}}\u0026lt;/span\u0026gt;:\n        \u0026lt;span\u0026gt;{{strDate | date:\u0027yyyy-MM-dd HH:mm:ss Z\u0027}}\u0026lt;/span\u0026gt;\n        \u0026lt;br\u0026gt;\n        \u0026lt;span ng-non-bindable\u0026gt;{{1288323623006 | date:\u0027MM/dd/yyyy @ h:mma\u0027}}\u0026lt;/span\u0026gt;:\n        \u0026lt;span\u0026gt;{{strDate | date:\u0027MM/dd/yyyy @ h:mma\u0027}}\u0026lt;/span\u0026gt;\n        \u0026lt;br\u0026gt;\n    \u0026lt;/p\u0026gt;\n    \u0026lt;h2\u0026gt;JSON格式化 json\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;\u0026lt;span\u0026gt;{{jsonObj | json}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    angular.module(\u0027myApp\u0027, []).controller(\u0027myCtrl\u0027, function($scope) {\n        $scope.yourName \u003d \"Your Name\";\n        $scope.anumber \u003d 100100100;\n        $scope.price \u003d 100;\n        $scope.numb \u003d 1;\n        $scope.strDate \u003d \u00271288323623006\u0027;\n        $scope.jsonObj \u003d {\u0027name\u0027:\u0027ZhangSan\u0027,\u0027age\u0027:20};\n    });\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003cspan style\u003d\"color: #ff0000;\"\u003e \u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Filter\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_filter.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\u003c/span\u003e\n\n在AngularJs表达式中使用过滤如(\u003cstrong\u003eaname | lowercase\u003c/strong\u003e)，比较依赖于AngularJs指令和表达式，而指令和表达式是依赖于视图\n\n在控制器\u003cstrong\u003eController\u003c/strong\u003e中使用\u003cstrong\u003e$filter\u003c/strong\u003e能够有效控制数据，视图与数据之间的分离，更加有利于管理数据和视图的优化\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;AngularJs Filter2\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u003d\"myApp\" ng-controller\u003d\"myCtrl\"\u0026gt;\n    \u0026lt;div\u0026gt;\n        \u0026lt;p\u0026gt;字符串：\u0026lt;span\u0026gt;{{originalText}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;大写格式：\u0026lt;span\u0026gt;{{upperText}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;小写格式：\u0026lt;span\u0026gt;{{lowerext}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;金额：\u0026lt;span\u0026gt;{{price}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;格式化金额：\u0026lt;span\u0026gt;{{currencyPrice}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;格式化当前时间：\u0026lt;span\u0026gt;{{strDate}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;格式化json对象：\u0026lt;span\u0026gt;{{jsonStr}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n    angular.module(\u0027myApp\u0027, []).controller(\u0027myCtrl\u0027, function($scope, $filter) {\n        $scope.originalText \u003d \u0027heLLo\u0027;\n        $scope.upperText \u003d $filter(\u0027uppercase\u0027)($scope.originalText);\n        $scope.lowerext \u003d $filter(\u0027lowercase\u0027)($scope.originalText);\n        $scope.price \u003d 1000000;\n        $scope.currencyPrice \u003d $filter(\u0027currency\u0027)($scope.price,\u0027￥\u0027);\n        $scope.strDate \u003d $filter(\u0027date\u0027)(new Date(),\u0027yyyy-MM-dd HH:mm:ss\u0027);\n        $scope.jsonStr \u003d $filter(\u0027json\u0027)({\u0027name\u0027:\u0027ZhS\u0027,\u0027age\u0027:20});\n    });\n    \u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Filter2\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_filter2.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\n\n\u003cstrong\u003e$filter\u003c/strong\u003e和\u003cstrong\u003e$scope\u003c/strong\u003e都是AngularJs中内置的对象，\u003cstrong\u003e$filter\u003c/strong\u003e用于转换和筛选数据，用法\u003ccode\u003e$filter(\u0027\u0027)()\u003c/code\u003e，例如转换字符为大写：\u003ccode\u003e$filter(\u0027uppercase\u0027)(\u0027hello\u0027) \u003c/code\u003e\n\n除了格式化数字，文本，时间，json对象外，另外一个更为强大的功能就是对数据的过滤，其中包含筛选、排序都是是开发中经常使用到的功能\n\u003ch2\u003efilter\u003c/h2\u003e\n从数组中选择一个子集，并将其返回为一个新数组。\n\u003ch4\u003e在AngularJS表达式中\u003c/h4\u003e\n\u003ccode\u003e{{ filter_expression | filter : expression : comparator}}\u003c/code\u003e\n\u003ch4\u003e在JavaScript\u003c/h4\u003e\n\u003ccode\u003e$filter(\u0027filter\u0027)(array, expression, comparator)\u003c/code\u003e\n\u003ch4\u003eJavaScript中的参数说明\u003c/h4\u003e\n\u003ccode\u003earray Array 原数组，需要过滤的数组\u003c/code\u003e\n\u003ccode\u003eexpression string/object/function(vaule) 使用数组中的项过滤数组，可以是一个或者多个。 object ：可以是如{name:\"M\", phone:\"1\"} 。function(vaule) ：可以自定义一个函数过滤数组\u003c/code\u003e\n\u003ccode\u003ecomparator function(actual, expected) return true/false|undefined 比较器，用于筛选值和实际值得比较，可以是一个或者多个。function(actual, expected) ：实际值于筛选值的比较，返回true|false或者undefined\u003c/code\u003e\n\u003ch2\u003eorderBy\u003c/h2\u003e\n按照给定数组中的项的字母顺序排列的字符串或者数值的数字，注：如果你注意到的数字没有正确的排序，请确保它们实际上是被保存为数而不是字符串。\n\u003ch4\u003e在AngularJS表达式中\u003c/h4\u003e\n\u003ccode\u003e{{ orderBy_expression | orderBy : expression : reverse}}\u003c/code\u003e\n\u003ch4\u003e在JavaScript\u003c/h4\u003e\n\u003ccode\u003e$filter(\u0027orderBy\u0027)(array, expression, reverse)\u003c/code\u003e\n\u003ch4\u003eJavaScript中的参数说明\u003c/h4\u003e\n\u003ccode\u003eexpression string/function/Array 比较器用来确定元素的顺序。 function：函数的结果将使用\u0026lt;，\u003d，\u0026gt;操作符进行排序。string：通过数组中的项目来排序，使用+|-控制升序或者降序。Array：一个排序优先级的数组，如[+age,-name]。reverse：颠倒数组的顺序，布尔值\u003c/code\u003e\n\u003ch2\u003elimitTo\u003c/h2\u003e\n用于截取指定数目的数组或者字符串\n\u003ch4\u003e在AngularJS表达式中\u003c/h4\u003e\n\u003ccode\u003e{{ limitTo_expression | limitTo : limit}}\u003c/code\u003e\n\u003ch4\u003e在JavaScript\u003c/h4\u003e\n\u003ccode\u003e$filter(\u0027limitTo\u0027)(input, limit)\u003c/code\u003e\n\u003ch4\u003eJavaScript中的参数说明\u003c/h4\u003e\n\u003ccode\u003einput：Array/string 原数组或者字符串\u003c/code\u003e\n\u003ccode\u003elimit：string/number 返回一定长度的数组的项或者字符串。如果是正则从数组或者字符串开始位置起向后截取，如果是负则从结束位置起向前截取。超出数组或者字符串长度按最大长度处理。不是数字或者字符串格式的数字将返回空\u003c/code\u003e\n\u003ch2\u003e数据筛选实例\u003c/h2\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\u0026lt;head\u0026gt;\n\t\u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n\t\u0026lt;title\u0026gt;AngularJs Filter Order\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body ng-app\u003d\"myApp\" ng-controller\u003d\"myCtrl\" \u0026gt;\n\t\u0026lt;h2\u0026gt;筛选与排序\u0026lt;/h2\u0026gt;\n\t\u0026lt;p\u0026gt;姓名：\u0026lt;input ng-model\u003d\"uname\"\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;p\u0026gt;城市：\u0026lt;input ng-model\u003d\"ucity\"\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;p\u0026gt;点击表头Age排序\u0026lt;/p\u0026gt;\n\t\u0026lt;table width\u003d\"500px\" border\u003d\"1\" cellspacing\u003d\"0\" \u0026gt;\n\t\t\u0026lt;tr\u0026gt;\n\t\t\t\u0026lt;th\u0026gt;Id\u0026lt;/th\u0026gt;\n\t\t\t\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\n\t\t\t\u0026lt;th\u0026gt;\u0026lt;a href\u003d\"\" ng-click\u003d\"predicate \u003d \u0027age\u0027; reverse\u003d!reverse\"\u0026gt;Age\u0026lt;/a\u0026gt;\u0026lt;/th\u0026gt;\n\t\t\t\u0026lt;th\u0026gt;City\u0026lt;/th\u0026gt;\n\t\t\u0026lt;/tr\u0026gt;\n\t\t\u0026lt;tr ng-repeat\u003d\"user in users | filter : {name:uname,city:ucity} | orderBy:predicate:reverse\" \u0026gt;\n\t\t\t\u0026lt;td\u0026gt;{{user.id}}\u0026lt;/td\u0026gt;\n\t\t\t\u0026lt;td\u0026gt;{{user.name}}\u0026lt;/td\u0026gt;\n\t\t\t\u0026lt;td\u0026gt;{{user.age}}\u0026lt;/td\u0026gt;\n\t\t\t\u0026lt;td\u0026gt;{{user.city}}\u0026lt;/td\u0026gt;\n\t\t\u0026lt;/tr\u0026gt;\n\t\u0026lt;/table\u0026gt;\n\t\u0026lt;h2\u0026gt;limitTo\u0026lt;/h2\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t输入截取数组的数组的项：\u0026lt;input ng-model\u003d\"arrIndex\"\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;span ng-repeat\u003d\"i in arrs | limitTo : arrIndex\"\u0026gt;{{i}}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n\tangular.module(\u0027myApp\u0027,[]).controller(\u0027myCtrl\u0027,function ($scope) {\n\t\t$scope.users \u003d [\n\t\t\t{id:1,name:\u0027ZhangSan\u0027,age:20,city:\u0027ShangHai\u0027},\n\t\t\t{id:2,name:\u0027LiSi\u0027,age:26,city:\u0027BeiJing\u0027},\n\t\t\t{id:3,name:\u0027WangWu\u0027,age:28,city:\u0027HangZhou\u0027},\n\t\t\t{id:4,name:\u0027Zmus\u0027,age:40,city:\u0027Albuquerque\u0027},\n\t\t\t{id:5,name:\u0027Keb\u0027,age:38,city:\u0027Portland\u0027},\n\t\t\t{id:6,name:\u0027Mg\u0027,age:22,city:\u0027Paris\u0027},\n\t\t\t{id:7,name:\u0027Sur\u0027,age:29,city:\u0027Brandenburg\u0027},\n\t\t\t{id:8,name:\u0027Haol\u0027,age:30,city:\u0027Cowes\u0027},\n\t\t\t{id:9,name:\u0027Mei\u0027,age:27,city:\u0027Warszawa\u0027},\n\t\t\t{id:10,name:\u0027Amo\u0027,age:21,city:\u0027Hk\u0027},\n\t\t];\n\t\t$scope.arrs \u003d [1,2,4,5,6,7,8,9];\n\t\t$scope.arrIndex \u003d $scope.arrs.length;\n\t});\n\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/pre\u003e\n\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Filter Order\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_filter_order.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\n\n数据的转换和筛选都是通过管道(|)添加到表达式或者指令中，数据筛选\u003cstrong\u003efilter\u003c/strong\u003e和\u003cstrong\u003eorderBy\u003c/strong\u003e可以跟多个条件，条件必须和数据项一一对应，例如：\u003cstrong\u003eng-repeat\u003d\"user in users | filter : {name:uname,city:ucity} | orderBy : \u0027age\u0027\"\u003c/strong\u003e",
    "title": "AngularJs 过滤器",
    "post_tag": "AngularJs",
    "post_date": "2015-09-06 03:29:24"
}, {
    "content": "前面几篇已经对AngularJs的表达式和MVC又初步的了解，也使用到了AngularJs的指令，那么指令是什么？具体又有哪些？\n\n简而言之，AngularJs通过指令这一属性来扩展HTML\n\u003ch2\u003eAngularJs指令\u003c/h2\u003e\nAngularJs指令是以前缀为ng-开始的HTML属性\n\u003col\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-app\u003c/strong\u003e 初始化一个AngularJs应用程序\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-controller\u003c/strong\u003e 定义应用程序控制器\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-init\u003c/strong\u003e 初始化应用程序的数据，通常会在控制器中初始化应用程序的数据，代替ng-init\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-model\u003c/strong\u003e 一个可供应用程序动态绑定的元素值\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-bind\u003c/strong\u003e 绑定数据到应用程序\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-bind-html\u003c/strong\u003e 绑定数据到元素的\u003cstrong\u003einnerHTML\u003c/strong\u003e，可以是一个表达式，这是一个不安全的，不建议使用\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-bind-template \u003c/strong\u003e可以使用多个表达式\u003cstrong\u003e{{}}\u003c/strong\u003e绑定数据到指定元素，\u003cstrong\u003eng-bind-template\u003d\"{{html1}}{{html2}}\"\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-show ng-hide\u003c/strong\u003e 显示和隐藏\u003cstrong\u003eHTML\u003c/strong\u003e元素，一个或多个表达式组成的布尔值\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-style\u003c/strong\u003e 设置一个\u003cstrong\u003ecss\u003c/strong\u003e样式作用于\u003cstrong\u003eHTML\u003c/strong\u003e元素，一个或多个表达组成\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-class\u003c/strong\u003e 设置一个类样式作用于\u003cstrong\u003eHTML\u003c/strong\u003e元素，一个或多个表达式组成，\u003cstrong\u003eng-class\u003d\"style\" \u003c/strong\u003e/ \u003cstrong\u003eng-class\u003d\"[style1, style2, style3]\"\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-class-odd\u003c/strong\u003e \u003cstrong\u003eng-class-even\u003c/strong\u003e 迭代中经常使用，给奇、偶行绑定类样式，如表格隔行表色\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-repeat\u003c/strong\u003e 重复HTML元素,作用于数组或集合对象\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-if\u003c/strong\u003e 一个判断表达式\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-include\u003c/strong\u003e 引入一个html文件内容\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003eng-non-bindable\u003c/strong\u003e 忽略元素内的表达式 \u003cstrong\u003e{{}} \u003c/strong\u003e和 \u003cstrong\u003eng-*\u003c/strong\u003e\u003c/li\u003e\n\t\u003cli\u003e...\u003c/li\u003e\n\u003c/ol\u003e\n\u003c!--more--\u003e\n\n使用实例\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"zh-CN\"\u0026gt;\n\u0026lt;head\u0026gt;\n\t\u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n\t\u0026lt;title\u0026gt;AngularJs Instruction\u0026lt;/title\u0026gt;\n\t\u0026lt;style type\u003d\"text/css\"\u0026gt;\n\t\t.text-red{\n\t\t\tcolor:red;\n\t\t}\n\t\u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body ng-app\u003d\"myApp\" ng-controller\u003d\"myCtrl\" \u0026gt;\n\t\u0026lt;div ng-init\u003d\"ngInit\u003d\u0027ng-init\u0027\"\u0026gt;\n\t\t\u0026lt;h4\u0026gt;{{ngInit}}\u0026lt;/h4\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;h4\u0026gt;ng-model\u0026lt;/h4\u0026gt;\n\t\t\u0026lt;input type\u003d\"text\" ng-model\u003d\"aname\"\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;h4\u0026gt;ng-bind\u0026lt;/h4\u0026gt;\n\t\t\u0026lt;span ng-bind\u003d\"aname\"\u0026gt;\u0026lt;/span\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;h4\u0026gt;ng-bind-template\u0026lt;/h4\u0026gt;\n\t\t\u0026lt;p ng-bind-template\u003d\"{{aname}}{{myHTML}}\"\u0026gt;\u0026lt;/p\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;h4\u0026gt;ng-show,ng-hide\u0026lt;/h4\u0026gt;\n\t\tClick me: \u0026lt;input type\u003d\"checkbox\" ng-model\u003d\"checked\" \u0026gt;\n\t\t\u0026lt;p ng-show\u003d\"checked\"\u0026gt;checked\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p ng-hide\u003d\"checked\"\u0026gt;no checked\u0026lt;/p\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;h4\u0026gt;ng-style\u0026lt;/h4\u0026gt;\n\t\t\u0026lt;p ng-non-bindable\u0026gt;ng-style\u003d\"{\u0027background-color\u0027:colorName}\"\u0026lt;/p\u0026gt;\n\t\t\u0026lt;div style\u003d\"height:20px\" ng-style\u003d\"{\u0027background-color\u0027:colorName}\"\u0026gt;\u0026lt;/div\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;h2\u0026gt;ng-class\u0026lt;/h2\u0026gt;\n\t\t\u0026lt;div  ng-class\u003d\"textRed\"\u0026gt;\n\t\t\t\u0026lt;p ng-non-bindable\u0026gt;ng-class\u003d\"text-red\"\u0026lt;/p\u0026gt;\n\t\t\u0026lt;/div\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;h4\u0026gt;ng-repeat\u0026lt;/h4\u0026gt;\n\t\t\u0026lt;p ng-non-bindable\u0026gt;ng-class-even\u003d\"textRed\"\u0026lt;/p\u0026gt;\n\t\t\u0026lt;table width\u003d\"200px\" cellspacing\u003d\"0\" border\u003d\"1\"\u0026gt;\n\t\t\t\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Index\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Vaule\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\n\t\t\t\u0026lt;tr ng-repeat\u003d\"a in arrs\" ng-class-even\u003d\"textRed\"\u0026gt;\n\t\t\t\t\u0026lt;td\u0026gt;{{$index}}\u0026lt;/td\u0026gt;\n\t\t\t\t\u0026lt;td\u0026gt;{{a}}\u0026lt;/td\u0026gt;\n\t\t\t\u0026lt;/tr\u0026gt;\n\t\t\u0026lt;/table\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;h4\u0026gt;ng-non-bindable\u0026lt;/h4\u0026gt;\n\t\t\u0026lt;p ng-non-bindable\u0026gt;ng-bind-template\u003d\"{{aname}}{{myHTML}}\"\u0026lt;/p\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n\tangular.module(\u0027myApp\u0027,[]).controller(\u0027myCtrl\u0027,function ($scope) {\n\t\t$scope.aname \u003d \"Cb.Guo\";\n\t\t$scope.myHTML \u003d \" like Code!\";\n\t\t$scope.colorName \u003d \"red\";\n\t\t$scope.textRed \u003d \"text-red\";\n\t\t$scope.arrs \u003d [\u0027a\u0027,\u0027b\u0027,\u0027c\u0027,\u0027d\u0027];\n\t});\n\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/pre\u003e\n\u003cspan style\u003d\"color: #ff0000;\"\u003e\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Controller\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_instruction.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\u003c/span\u003e\n\u003ch2\u003eng-model 指令\u003c/h2\u003e\n\u003cstrong\u003eng-model\u003c/strong\u003e 指令 \u003cstrong\u003e绑定 HTML 元素\u003c/strong\u003e 到应用程序数据。\n\n\u003cstrong\u003eng-model\u003c/strong\u003e 指令也可以：\n\u003cul\u003e\n\t\u003cli\u003e为应用程序数据提供类型验证（number、email、required）。\u003c/li\u003e\n\t\u003cli\u003e为应用程序数据提供状态（invalid、dirty、touched、error）。\u003c/li\u003e\n\t\u003cli\u003e为 HTML 元素提供 CSS 类。\u003c/li\u003e\n\t\u003cli\u003e绑定 HTML 元素到 HTML 表单。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eng-repeat 指令\u003c/h2\u003e\n\u003cstrong\u003eng-repeat \u003c/strong\u003e指令用于迭代数组，作用于迭代\u003cstrong\u003eHTML\u003c/strong\u003e元素本身\n\n迭代中可以使用的内置变量\n\u003ctable class\u003d\"table table-striped \"\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e参数\u003c/th\u003e\n\u003cth\u003e类型\u003c/th\u003e\n\u003cth\u003e详情\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$index\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enumber\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e当前迭代元素的下标，从0开始\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$first\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 为第一个迭代元素\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$middle\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 为第一个和最后一个的中间的迭代元素\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$last\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 最后一个迭代元素\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$even\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 当前迭代元素下标 $index 为偶数\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$odd\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003etrue 当前迭代元素下标 $index 为奇数\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u0026nbsp;",
    "title": "AngularJs 指令",
    "post_tag": "AngularJs",
    "post_date": "2015-09-04 13:35:37"
}, {
    "content": "\u003cimg class\u003d\"alignnone\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/docs/img/guide/simple_scope_final.png\" alt\u003d\"\" width\u003d\"640\" height\u003d\"376\" /\u003e\n\n前面说到数据绑定也就是Model和View，那么就该控制器Controller登场了\n\nAngularJs 中控制器Controller是很重要的，可以说是必不可少的，他是模块化的核心，同时也可以有效的控制数据和视图之间的绑定\n\n以上一篇的数据绑定为例，这里使用控制器来管理数据\n\n\u003c!--more--\u003e\n\u003cpre class\u003d\"lang:default decode:true \"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\u0026lt;head\u0026gt;\n\t\u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n\t\u0026lt;title\u0026gt;AngularJs Controller\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body ng-app\u003d\"myApp\" ng-controller\u003d\"myCtrl\"\u0026gt;\n\t\u0026lt;div\u0026gt;\n\t\t\u0026lt;p\u0026gt;姓名:\u0026lt;input type\u003d\"text\" ng-model\u003d\"aname\" placeholder\u003d\"你的姓名\"\u0026gt;\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;ng-bind输出：\u0026lt;span ng-bind\u003d\"aname\"\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;表达式输出：{{aname}}\u0026lt;/p\u0026gt;\n\t\t\u0026lt;h2\u0026gt;有序数组\u0026lt;/h2\u0026gt;\n\t\t\u0026lt;p\u0026gt;arrs\u003d{{arrs}}\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;span ng-repeat\u003d\"i in arrs\"\u0026gt;{{i}},\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n\t\t\u0026lt;h2\u0026gt;集合对象\u0026lt;/h2\u0026gt;\n\t\t\u0026lt;p\u0026gt;users\u003d{{users}}\u0026lt;/p\u0026gt;\n\t\t\u0026lt;table width\u003d\"300px\" border\u003d\"1\"\u0026gt;\n\t\t\t\u0026lt;tr\u0026gt;\n\t\t\t\t\u0026lt;th\u0026gt;Id\u0026lt;/th\u0026gt;\n\t\t\t\t\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\n\t\t\t\u0026lt;/tr\u0026gt;\n\t\t\t\u0026lt;tr ng-repeat\u003d\"user in users\"\u0026gt;\n\t\t\t\t\u0026lt;td\u0026gt;{{user.id}}\u0026lt;/td\u0026gt;\n\t\t\t\t\u0026lt;td\u0026gt;{{user.name}}\u0026lt;/td\u0026gt;\n\t\t\t\u0026lt;/tr\u0026gt;\n\t\t\u0026lt;/table\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\"\u0026gt;\n\tvar app \u003d angular.module(\u0027myApp\u0027, []);\n\tapp.controller(\u0027myCtrl\u0027,function ($scope) {\n\t\t$scope.aname \u003d \"your name\";\n\t\t$scope.arrs\u003d[0,1,2,3,4,5,6,7,8,9];\n\t\t$scope.users\u003d[{id:1,name:\u0027XiaoM\u0027},{id:2,name:\u0027DaBai\u0027},{id:3,name:\u0027LvXia\u0027}];\n\t})\n\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/pre\u003e\n\u003cspan style\u003d\"color: #ff0000;\"\u003e\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs Controller\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_controller.html\" target\u003d\"_blank\"\u003e查看DEMO\u003c/a\u003e\u003c/span\u003e\n\nAngularJs指令\u003cstrong\u003e ng-controller\u003d\"myCtrl\"  \u003c/strong\u003e定义了一个名叫myCtrl的控制器\n\n控制器中使用\u003cstrong\u003e$scope\u003c/strong\u003e定义应用程序所需要的数据，HTML页面写法完全不便，数据在控制器内，数据和视图分离，也更加方便管理数据\n\n控制器的$scope相当于作用域，控制范围的对象，用于保存Model对象\n\n需要注意的是：\u003cspan style\u003d\"color: #ff0000;\"\u003e$scope是AngularJs内置对象之一，不能自由命名，\u003c/span\u003e\n\u003ch2\u003e外部文件中的控制器\u003c/h2\u003e\n只需要将页面javascript标签的代码单独使用一个如myController.js的文件引入页面即可\n\u003cpre class\u003d\"lang:default decode:true\"\u003e//主页面引入\n\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"myController.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\n//myController.js\n\nvar app \u003d angular.module(\u0027myApp\u0027, []);\n\tapp.controller(\u0027myCtrl\u0027,function ($scope) {\n\t\t$scope.aname \u003d angular.lowercase(\"your name\");\n\t\t$scope.arrs\u003d[0,1,2,3,4,5,6,7,8,9];\n\t\t$scope.users\u003d[{id:1,name:\u0027XiaoM\u0027},{id:2,name:\u0027DaBai\u0027},{id:3,name:\u0027LvXia\u0027}];\n\t})\u003c/pre\u003e\n这里的lowercase()函数是Angularjs的函数之一",
    "title": "AngularJs 控制器",
    "post_tag": "AngularJs",
    "post_date": "2015-09-03 17:19:31"
}, {
    "content": "数据也就是Model，数据和视图的绑定是AngularJs重要的特性，它总能给你眼前一亮的感觉。\u003cimg class\u003d\"alignnone\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/docs/img/guide/concepts-databinding1.png\" alt\u003d\"\" width\u003d\"412\" height\u003d\"243\" /\u003e\n\n\u003c!--more--\u003e\n\n先看一个动态绑定数据的实例\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\u0026lt;head\u0026gt;\n\t\u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n\t\u0026lt;title\u0026gt;Angularjs Model Bind\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n\t\u0026lt;div ng-app ng-init\u003d\"aname \u003d \u0027Your Name\u0027\"\u0026gt;\n\t\t\u0026lt;p\u0026gt;姓名:\u0026lt;input type\u003d\"text\" ng-model\u003d\"aname\" \u0026gt;\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;ng-bind输出：\u0026lt;span ng-bind\u003d\"aname | lowercase\"\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;表达式输出：{{aname | uppercase}}\u0026lt;/p\u0026gt;\n\t\u0026lt;/div\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/pre\u003e\n直接看效果，\u003ca title\u003d\"AngularJs Model\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_model.html\" target\u003d\"_blank\"\u003e \u003cspan style\u003d\"color: #ff0000;\"\u003e查看DEMO\u003c/span\u003e\u003c/a\u003e\n\n使用指令ng-model定义了一个变量名叫name的Model对象，分别使用指令ng-bind和表达式输出变量name到HTML相应的位置上，输出的值随用户的输入动态的改变，还可以使用管道过滤显示的内容\n\u003ch2\u003e绑定数组、集合，或者是集合对象\u003c/h2\u003e\n\u003cimg class\u003d\"alignnone\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/docs/img/guide/dom_scope_final.png\" alt\u003d\"\" width\u003d\"500\" height\u003d\"472\" /\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\u0026lt;head\u0026gt;\n\t\u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n\t\u0026lt;title\u0026gt;Angularjs Model Bind\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body ng-app ng-init\u003d\"arrs\u003d[0,1,2,3,4,5,6,7,8,9];users\u003d[{id:1,name:\u0027XiaoM\u0027},{id:2,name:\u0027DaBai\u0027},{id:3,name:\u0027LvXia\u0027}]\"\u0026gt;\n\t\t\u0026lt;h2\u0026gt;有序数组\u0026lt;/h2\u0026gt;\n\t\t\u0026lt;p\u0026gt;arrs\u003d{{arrs}}\u0026lt;/p\u0026gt;\n\t\t\u0026lt;p\u0026gt;\u0026lt;span ng-repeat\u003d\"i in arrs\"\u0026gt;{{i}},\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n\t\t\u0026lt;h2\u0026gt;集合对象\u0026lt;/h2\u0026gt;\n\t\t\u0026lt;p\u0026gt;users\u003d{{users}}\u0026lt;/p\u0026gt;\n\t\t\u0026lt;table width\u003d\"300px\" border\u003d\"1\"\u0026gt;\n\t\t\t\u0026lt;tr\u0026gt;\n\t\t\t\t\u0026lt;th\u0026gt;Id\u0026lt;/th\u0026gt;\n\t\t\t\t\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\n\t\t\t\u0026lt;/tr\u0026gt;\n\t\t\t\u0026lt;tr ng-repeat\u003d\"user in users\"\u0026gt;\n\t\t\t\t\u0026lt;td\u0026gt;{{user.id}}\u0026lt;/td\u0026gt;\n\t\t\t\t\u0026lt;td\u0026gt;{{user.name}}\u0026lt;/td\u0026gt;\n\t\t\t\u0026lt;/tr\u0026gt;\n\t\t\u0026lt;/table\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/pre\u003e\n\u003ca title\u003d\"AngularJs Model Array\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_model_array.html\" target\u003d\"_blank\"\u003e \u003cspan style\u003d\"color: #ff0000;\"\u003e查看DEMO\u003c/span\u003e\u003c/a\u003e\n\u003cpre class\u003d\"\"\u003eng-init\u003d\"arrs\u003d[0,1,2,3,4,5,6,7,8,9];users\u003d[{id:1,name:\u0027XiaoM\u0027},{id:2,name:\u0027DaBai\u0027},{id:3,name:\u0027LvXia\u0027}]\"\u003c/pre\u003e\n初始化变量为arrs的有序数组和变量users的集合对象\n\n这里要注意的是，\u003cspan style\u003d\"color: #ff0000;\"\u003earrs\u003d[0,1,2,3,4,5,6,7,8,9]必须是有序的，如果是无序可以这样写arrs\u003d[\u002710\u0027,\u002751\u0027,\u002712\u0027,\u002773\u0027,\u002799\u0027]\u003c/span\u003e\n\n\u003cstrong\u003eng-repeat\u003c/strong\u003e 指令重复HTML元素，输出数据，这里可以理解为一个迭代器，只不过迭代器作用于自身，也就是是迭代自身HTML元素，",
    "title": "AngularJs 数据绑定",
    "post_tag": "AngularJs",
    "post_date": "2015-09-03 12:39:33"
}, {
    "content": "AngularJS \u003cstrong\u003e表达式 \u003c/strong\u003e的主要作用是将数据绑定到 HTML，即在在表达式书写的位置\n\u003ch2\u003eAngularJs表达式的使用方法\u003c/h2\u003e\n\u003cul\u003e\n\t\u003cli\u003eAngularJs表达式主要写在双大括号中{{\u003cstrong\u003eexpression \u003c/strong\u003e}}\u003c/li\u003e\n\t\u003cli\u003eAngularjs表达式与AngularJs指令\u003cstrong\u003eng-bind\u003c/strong\u003e作用相似，ng-bind会更加强大\u003c/li\u003e\n\t\u003cli\u003eAngularJs表达式支持变量、字符串、数字、对象、数组等\u003c/li\u003e\n\t\u003cli\u003eAngularJs表达式能够使用数学运算、AngularJs自身的函数等\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!--more--\u003e\n\nAngularJs 表达式全能示例\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\n\u0026lt;head\u0026gt;\n    \u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;AngularJs Expression\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\n\u0026lt;body ng-app\u0026gt;\n    \u0026lt;h2\u0026gt;字符串\u0026lt;/h2\u0026gt;\n    \u0026lt;div ng-init\u003d\"firstName\u003d\u0027John\u0027;lastName\u003d\u0027Doe\u0027\"\u0026gt;\n        \u0026lt;p\u0026gt;姓名： {{ firstName + \" \" + lastName }}\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;使用ng-bind： \u0026lt;span ng-bind\u003d\"firstName + \u0027 \u0027 + lastName\"\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;h2\u0026gt;数学运算\u0026lt;/h2\u0026gt;\n        \u0026lt;div ng-init\u003d\"quantity\u003d1.5;cost\u003d5\"\u0026gt;\n            \u0026lt;p\u0026gt;总价： {{quantity * cost}}\u0026lt;/p\u0026gt;\n            \u0026lt;p\u0026gt;使用ng-bind： \u0026lt;span ng-bind\u003d\"quantity * cost\"\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n        \u0026lt;/div\u0026gt;\n    \u0026lt;h2\u0026gt;对象\u0026lt;/h2\u0026gt;\n    \u0026lt;div ng-init\u003d\"person\u003d{firstName:\u0027John\u0027,lastName:\u0027Doe\u0027}\"\u0026gt;\n    \t\u0026lt;p\u0026gt;person\u003d{{person}}\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;姓名： {{ person.firstName + \" \" + person.lastName }}\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;使用ng-bind： \u0026lt;span ng-bind\u003d\"person.firstName + \u0027 \u0027 + person.lastName\"\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;h2\u0026gt;数组\u0026lt;/h2\u0026gt;\n    \u0026lt;div ng-init\u003d\"points\u003d[1,2,5,3,6,8,5,5,9]\"\u0026gt;\n    \t\u0026lt;p\u0026gt;points\u003d{{points}}\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;第三个值为{{points[2]}}\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;使用ng-bind： \n            \u0026lt;span ng-bind\u003d\"points[2]\"\u0026gt;\u0026lt;/span\u0026gt;\n        \u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n    \u0026lt;h2\u0026gt;函数\u0026lt;/h2\u0026gt;\n        \u0026lt;p\u0026gt;大写姓名： {{ firstName + \" \" + lastName | uppercase}}\u0026lt;/p\u0026gt;\n        \u0026lt;p\u0026gt;小写姓名： {{ firstName + \" \" + lastName | lowercase}}\u0026lt;/p\u0026gt;\n    \u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/pre\u003e\n\u003cspan style\u003d\"color: #ff0000;\"\u003e\u003ca style\u003d\"color: #ff0000;\" title\u003d\"AngularJs表达式\" href\u003d\"http://alsguo.github.io/angularjs/angularjs_expression.html\" target\u003d\"_blank\"\u003e 查看DEMO\u003c/a\u003e\u003c/span\u003e\n\n该实例中用到AngularJs的一些指令\n\u003cul\u003e\n\t\u003cli\u003eng-init 初始化变量，对象，数组等\u003c/li\u003e\n\t\u003cli\u003eng-bind 绑定数据到HTML元素\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eAngularJS 表达式 与 JavaScript 表达式\u003c/h2\u003e\n\u003cul\u003e\n\t\u003cli\u003e与 JavaScript 表达式相似，AngularJS 表达式可以包含字母，操作符，变量。\u003c/li\u003e\n\t\u003cli\u003e与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中。\u003c/li\u003e\n\t\u003cli\u003e与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常。\u003c/li\u003e\n\t\u003cli\u003e与 JavaScript 表达式不同，AngularJS 表达式支持过滤器。\u003c/li\u003e\n\u003c/ul\u003e",
    "title": "AngularJs 表达式",
    "post_tag": "AngularJs",
    "post_date": "2015-09-02 02:57:24"
}, {
    "content": "\u003cdiv\u003e\u003cimg class\u003d\"alignnone wp-image-413 size-full\" src\u003d\"images/angularjs.jpg\" alt\u003d\"angularjs\" width\u003d\"500\" /\u003e\u003c/div\u003e\n\u003cdiv\u003e通过几个问答快速了解AngularJs的基本核心及用途\u003c/div\u003e\n\u003ch2\u003eAngularJs是什么？有哪些特性？\u003c/h2\u003e\n\u003cdiv\u003eAngularJS是一款来自Google的前端优秀WEB框架，和Dom操作框架有所不同，AngularJs扩展了HTMl本身构建应用的不足，更加专注于数据的处理，它的核心特性有：MVC、双向数据绑定、指令和语义化标签、模块化工具、依赖注入、HTML模板，以及对常用工具的封装，例如$http、$cookies、$location等。AngularJS框架的体积非常小，但是设计理念和功能却非常强大，值得前端开发者深入学习。\u003c/div\u003e\n\u003ch2\u003e主要用于哪里？什么样的情况使用AngularJs？\u003c/h2\u003e\n\u003c!--more--\u003e\n\u003cdiv\u003eAngularJs优秀的数据绑定，验证，依赖注入，组件重用等在构建一个CRUD（增加Create、查询Retrieve、更新Update、删除Delete）的应用是显得更加的方便，灵活，数据和视图的双向绑定可以让开发者更加注重逻辑代码的编写，可以减少大量重复的DOM操作\u003c/div\u003e\n\u003ch4\u003e一个典型的CRUD应用包含：\u003c/h4\u003e\n\u003cul\u003e\n\t\u003cli\u003e将数据模型关联到视图UI上\u003c/li\u003e\n\t\u003cli\u003e写、读、验证用户的输入\u003c/li\u003e\n\t\u003cli\u003e更新数据即更新UI\u003c/li\u003e\n\t\u003cli\u003e自动完成HTML的本地化输出\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003e可以解决哪些问题？\u003c/h2\u003e\n\u003ch4\u003e手动拼写操作DOM元素的代码，尤其是AJAX后的数据\u003c/h4\u003e\n\u003cdiv\u003eAngularJs将编写DOM的操作代码解脱出来，用声明的方式描述UI界面可随应用状态的改变而变化，开发者更专注于业务逻辑操作，而不需要去操作任何的DOM代码，这是很关键也是很重要的一点\u003c/div\u003e\n\u003ch4\u003e对UI界面的读写\u003c/h4\u003e\n\u003cdiv\u003e服务端的一个对象即绑定到HTML编写的表单UI，用户经过修改表单后在验证表单，如有错误会显示相应的错误提示，最后将数据在返回给服务端。这样的流程需要很多重复操作表单元素的代码，重复的赋值，和控制错误的提示等，AngularJs的数据双向绑定即修改数据就是修改页面表单，使之更加注重业务逻辑的实现而不需要做大量的重复操作DOM的工作\u003c/div\u003e\n\u003ch4\u003e使用回调\u003c/h4\u003e\n\u003cdiv\u003e使用回调技术会让你的代码更加的高大上，相反会更难以理解，代码也变得更加琐碎，AngularJs的数据双向绑定特性能让你把自己的应用的逻辑看得更清楚，同时还更加的高大上\u003c/div\u003e\n\u003ch4\u003e开始前得写大量的基础性的代码\u003c/h4\u003e\n\u003cdiv\u003e基本所用的框架在使用的过程中，都需要一些准备工作，一些框架特定的属性或者特殊的js语义化，AngularJs通过在HTML元素上以ng-*的指令进行初始化并且绑定数据模型，其核心是以一种Guice-like dependency-injection式的依赖注入自动加入到你的应用中，让你更快快的开始你的应用的具体开发\u003c/div\u003e\n\u003ch4\u003eHTML与AngularJs的关系\u003c/h4\u003e\n\u003cimg class\u003d\"alignnone\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/docs/img/guide/concepts-startup.png\" alt\u003d\"\" width\u003d\"341\" height\u003d\"290\" /\u003e\n\u003cdiv\u003e\n\u003ch2\u003e怎么使用AngularJs？\u003c/h2\u003e\n\u003cdiv\u003e页面body元素之前导入angular.js，或者使用压缩版angular.min.js\u003c/div\u003e\n\u003cdiv\u003e\n\u003cpre class\u003d\"lang:default decode:true\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang\u003d\"en\"\u0026gt;\n\u0026lt;head\u0026gt;\n\t\u0026lt;meta charset\u003d\"UTF-8\"\u0026gt;\n\t\u0026lt;title\u0026gt;AngularJs\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body ng-app\u0026gt;\n\u0026lt;h1\u0026gt;{{Angular Js}}\u0026lt;/h1\u0026gt;\n\u0026lt;script type\u003d\"text/javascript\" src\u003d\"http://lib.sinaapp.com/js/angular.js/angular-1.2.19/angular.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\u003c/pre\u003e\nbody元素上的ng-app属性标识这是一个AngularJs应用程序的作用域\n\n本系列将从AngularJs入门，AngularJs的高级，AngularJs的实战应用三个部分全面学习AngularJs\n\n让我们一起走进AngularJs的世界\n\n\u003c/div\u003e\n\u003c/div\u003e",
    "title": "单页面应用 AngularJs",
    "post_tag": "AngularJs",
    "post_date": "2015-09-01 08:10:47"
}]
